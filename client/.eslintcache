[{"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\index.js":"1","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\App.js":"2","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\components\\Navbar.js":"3","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\components\\ChatBox.js":"4","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\auth.js":"5","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Logout\\index.js":"6","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Home\\index.js":"7","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Profile\\index.js":"8","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Feed\\index.js":"9","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Logout\\Logout.js":"10","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Home\\Home.js":"11","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Profile\\Profile.js":"12","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Feed\\Feed.js":"13","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Login\\index.js":"14","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Login\\Login.js":"15","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\mutations.js":"16","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Register\\index.js":"17","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Register\\Register.js":"18","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\AddPet\\index.js":"19","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\AddPet\\AddPet.js":"20","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\queries.js":"21","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Matches\\index.js":"22","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Matches\\Match.js":"23"},{"size":230,"mtime":1675194465513,"results":"24","hashOfConfig":"25"},{"size":1417,"mtime":1675370585852,"results":"26","hashOfConfig":"25"},{"size":4741,"mtime":1675294674394,"results":"27","hashOfConfig":"25"},{"size":14824,"mtime":1675630586716,"results":"28","hashOfConfig":"25"},{"size":532,"mtime":1675444846193,"results":"29","hashOfConfig":"25"},{"size":40,"mtime":1675194465515,"results":"30","hashOfConfig":"25"},{"size":38,"mtime":1675194465514,"results":"31","hashOfConfig":"25"},{"size":45,"mtime":1675194465517,"results":"32","hashOfConfig":"25"},{"size":32,"mtime":1675280581851,"results":"33","hashOfConfig":"25"},{"size":1106,"mtime":1675444846191,"results":"34","hashOfConfig":"25"},{"size":690,"mtime":1675194465514,"results":"35","hashOfConfig":"25"},{"size":2875,"mtime":1675643412028,"results":"36","hashOfConfig":"25"},{"size":4602,"mtime":1675630586717,"results":"37","hashOfConfig":"25"},{"size":39,"mtime":1675194465515,"results":"38","hashOfConfig":"25"},{"size":3397,"mtime":1675643793430,"results":"39","hashOfConfig":"25"},{"size":2448,"mtime":1675630586719,"results":"40","hashOfConfig":"25"},{"size":42,"mtime":1675194465518,"results":"41","hashOfConfig":"25"},{"size":4273,"mtime":1675444846193,"results":"42","hashOfConfig":"25"},{"size":34,"mtime":1675367404476,"results":"43","hashOfConfig":"25"},{"size":4535,"mtime":1675630586717,"results":"44","hashOfConfig":"25"},{"size":1445,"mtime":1675630586719,"results":"45","hashOfConfig":"25"},{"size":39,"mtime":1675194465516,"results":"46","hashOfConfig":"25"},{"size":2336,"mtime":1675630586718,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"16qcfwd",{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"50"},"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\index.js",[],["103","104"],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\App.js",[],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\components\\Navbar.js",[],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\components\\ChatBox.js",["105","106","107"],"import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ForumIcon from '@mui/icons-material/Forum';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport { Modal, Typography, Box, Grid, TextField, Backdrop, Button, Tabs, Tab } from '@mui/material';\r\nimport { useQuery } from '@apollo/client'\r\nimport { QUERY_USER_CHATS, QUERY_FRIENDS_LIST } from '../utils/queries';\r\n\r\nimport auth from '../utils/auth'\r\n\r\nimport io from 'socket.io-client'\r\nconst socket = io.connect('http://localhost:3001');\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}\r\n            style={{ height: \"92%\" }}\r\n        >\r\n            {value === index && (\r\n                <Box sx={{ height: \"100%\" }}>\r\n                    <Box sx={{ height: \"100%\" }}>{children}</Box>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.number.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `simple-tab-${index}`,\r\n        'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nfunction ChatBox() {\r\n    // Show chat box modal use state\r\n    const [open, setOpen] = React.useState(false);\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => setOpen(false);\r\n\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const userMessageStyle = {\r\n        color: \"white\",\r\n        lineHeight: \"1.5\",\r\n        backgroundColor: \"primary.main\",\r\n        m: \"10px 10px 20px 10px\",\r\n        p: \"5px 20px\",\r\n        borderRadius: \"16px 16px 0 16px\",\r\n        maxWidth: \"40%\",\r\n        overflowWrap: \"break-word\",\r\n    }\r\n\r\n    const friendMessageStyle = {\r\n        color: \"black\",\r\n        lineHeight: \"1.5\",\r\n        backgroundColor: \"grey.400\",\r\n        m: \"10px 10px 20px 10px\",\r\n        p: \"5px 20px\",\r\n        borderRadius: \"16px 16px 16px 0px\",\r\n        maxWidth: \"40%\",\r\n        overflowWrap: \"break-word\"\r\n    }\r\n\r\n    // Getting array of user's chats\r\n    const { loading: userChatLoading, data: userChats } = useQuery(QUERY_USER_CHATS);\r\n    const myId = userChats?.getUserChats._id || \"\";\r\n\r\n    // Getting array of friends object ID\r\n    const { loading: friendsLoading, data: userFriends } = useQuery(QUERY_FRIENDS_LIST, {\r\n        variables: { ownerId: myId }\r\n    })\r\n    const userFriendsList = userFriends?.owner.friends || []\r\n\r\n    // Socket.io stuff\r\n    const [message, setMessage] = React.useState('');\r\n    const [messageReceived, setMessageReceived] = React.useState([]);\r\n    const [room, setRoom] = React.useState('')\r\n    const [chatAnnounce, setChatAnnounce] = React.useState('')\r\n    const [chatStyle, setChatStyle] = React.useState('')\r\n\r\n    const ChatBubblesRef = React.useRef(null);\r\n\r\n    // Logic to create chatroom ID\r\n    const createChatRoomID = (event) => {\r\n        const IdArr = []\r\n        IdArr.push(event.target.firstElementChild.id)\r\n        IdArr.push(myId)\r\n        IdArr.sort()\r\n        const roomID = IdArr.toString()\r\n\r\n        setChatAnnounce(`You're in a chat with ${event.target.id}`)\r\n        setRoom(roomID)\r\n        setChatStyle(event.target.firstElementChild.id)\r\n        setValue(1)\r\n\r\n        socket.emit('joinRoom', roomID);\r\n    }\r\n\r\n    const sendMessage = () => {\r\n        if (message === '') {\r\n            return\r\n        } else if (room === '') {\r\n            console.log(\"You're not in a room!\");\r\n            return\r\n        }\r\n        socket.emit(\"sendMessage\", { message, myId, room });\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        socket.on(\"receiveMessage\", (data) => {\r\n            setMessageReceived(data);\r\n            setMessage('')\r\n        })\r\n    }, [socket])\r\n\r\n    React.useEffect(() => {\r\n        ChatBubblesRef.current?.scrollIntoView()\r\n    }, [messageReceived])\r\n\r\n    // React components to map\r\n    function DisplayChats(props) {\r\n        return (\r\n            <>\r\n                <Box sx={{ height: '2px', marginBottom: '5px', backgroundColor: '#E4E4E4' }}></Box>\r\n                <Button variant={chatStyle === props.friendID ? 'contained' : 'text'} sx={{ width: '100%', marginBottom: '5px' }} onClick={createChatRoomID} id={props.fullName}>\r\n                    <input hidden={true} id={props.friendID} />\r\n                    {props.fullName}\r\n                </Button>\r\n            </>\r\n        )\r\n    }\r\n\r\n    function ChatBubble(props) {\r\n        const timeStamp = new Date(props.timeStamp)\r\n        const timeSetting = {\r\n            month: \"2-digit\",\r\n            day: \"2-digit\",\r\n            year: \"2-digit\",\r\n            hour: \"2-digit\",\r\n            minute: \"2-digit\"\r\n        }\r\n        const newTimeStamp = timeStamp.toLocaleDateString('en-US', timeSetting).split(',').join('')\r\n\r\n        return (\r\n            <>\r\n                <Box textAlign={props.sender === myId ? \"right\" : 'left'} fontSize=\"14px\" color=\"grey.400\">{newTimeStamp}</Box>\r\n                <Grid container justifyContent={props.sender === myId ? \"flex-end\" : 'flex-start'} >\r\n                    <Typography variant=\"h6\" component=\"div\"\r\n                        sx={props.sender === myId ? userMessageStyle : friendMessageStyle}>\r\n                        {props.message}\r\n                    </Typography>\r\n                </Grid>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {auth.loggedIn() ? (\r\n                <ForumIcon\r\n                    sx={{\r\n                        position: \"fixed\",\r\n                        zIndex: 50,\r\n                        right: \"3%\",\r\n                        bottom: \"3%\",\r\n                        width: 40,\r\n                        height: 40,\r\n                        \"&:hover\": {\r\n                            cursor: \"pointer\"\r\n                        }\r\n                    }}\r\n                    onClick={handleOpen}\r\n                />\r\n            ) : (<></>)}\r\n            <Backdrop sx={{ color: '#fff', zIndex: 10 }}\r\n                open={open}\r\n            >\r\n                <Modal\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    aria-labelledby=\"modal-modal-title\"\r\n                    aria-describedby=\"modal-modal-description\"\r\n                    sx={{ height: \"100vh\" }}\r\n                >\r\n                    <Box sx={{\r\n                        position: 'absolute',\r\n                        top: '50%',\r\n                        left: '50%',\r\n                        transform: 'translate(-50%, -50%)',\r\n                        width: \"70%\",\r\n                        height: \"70%\",\r\n                        bgcolor: 'background.paper',\r\n                        boxShadow: 24,\r\n                        p: 2,\r\n                        borderRadius: 5\r\n                    }}>\r\n                        {/* Medium screen breakpoint chat layout */}\r\n                        <Grid container sx={{ height: \"100%\", display: { xs: \"none\", md: \"flex\" } }}>\r\n                            <Grid item sm={3} sx={{\r\n                                borderRight: \"2px solid #E4E4E4\",\r\n                                p: \"0 16px 0 0\"\r\n                            }}>\r\n                                <Typography variant=\"h6\" component=\"h2\" sx={{ textAlign: \"center\", marginBottom: \"20px\" }}>\r\n                                    Chats\r\n                                </Typography>\r\n                                <Box overflow=\"auto\">\r\n                                    {userFriendsList.map((friend) => <DisplayChats key={friend._id} fullName={`${friend.first_name} ${friend.last_name}`} friendID={friend._id} />)}\r\n                                </Box>\r\n                            </Grid>\r\n                            <Grid item sm={9} sx={{\r\n                                p: \"0 0 0 16px\",\r\n                                height: \"100%\"\r\n                            }}>\r\n                                <Grid container direction=\"column\" justifyContent=\"flex-end\" sx={{ height: \"100%\", flexWrap: \"nowrap\" }}>\r\n                                    <Grid item>\r\n                                        <Typography>\r\n                                            {chatAnnounce}\r\n                                        </Typography>\r\n                                    </Grid>\r\n                                    <Grid item sx={{ overflow: \"auto\" }} >\r\n                                        {messageReceived.map((data) => <ChatBubble key={data._id} sender={data.sender} message={data.message} timeStamp={data.createdAt} />)}\r\n                                        <div ref={ChatBubblesRef} />\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Box component=\"form\"\r\n                                            onSubmit={(event) => {\r\n                                                event.preventDefault();\r\n                                                sendMessage()\r\n                                            }}\r\n                                        >\r\n                                            <Grid container justifyContent=\"center\" gap={1}>\r\n                                                <Grid item xs>\r\n                                                    <TextField fullWidth size='small' placeholder='Your message here...' id=\"textfield\" value={message}\r\n                                                        onChange={(event) => {\r\n                                                            setMessage(event.target.value)\r\n                                                        }}\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid item xs={2}>\r\n                                                    <Grid container justifyContent=\"center\" alignItems=\"center\" sx={{ height: 1 }}>\r\n                                                        <Button variant=\"contained\" endIcon={<SendIcon />} type='submit'>\r\n                                                            Send\r\n                                                        </Button>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Box>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        {/* Small screen breakpoint chat layout */}\r\n                        <Grid container sx={{ height: \"100%\", display: { xs: \"flex\", md: \"none\" } }}>\r\n                            <Grid container direction=\"column\" flexWrap='nowrap' sx={{ height: \"100%\" }}>\r\n                                <Grid item xs={1} sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n                                    <Tabs value={value} onChange={handleChange} centered>\r\n                                        <Tab label=\"Chats\" {...a11yProps(0)} />\r\n                                        <Tab label=\"Message\" {...a11yProps(1)} />\r\n                                    </Tabs>\r\n                                </Grid>\r\n                                <TabPanel value={value} index={0}>\r\n                                    {userFriendsList.map((friend) => <DisplayChats key={friend._id} fullName={`${friend.first_name} ${friend.last_name}`} friendID={friend._id} />)}\r\n                                </TabPanel>\r\n                                <TabPanel value={value} index={1} >\r\n                                    <Grid container direction=\"column\" justifyContent=\"flex-end\" flexWrap=\"nowrap\" height=\"100%\">\r\n                                        <Grid item>\r\n                                            <Typography>\r\n                                                {chatAnnounce}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item sx={{ overflow: \"auto\" }} id=\"messageField\">\r\n                                            {messageReceived.map((data) => <ChatBubble key={data._id} sender={data.sender} message={data.message} timeStamp={data.createdAt} />)}\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Box component=\"form\"\r\n                                                onSubmit={(event) => {\r\n                                                    event.preventDefault();\r\n                                                    sendMessage()\r\n                                                }}\r\n                                            >\r\n                                                <Grid container justifyContent=\"center\">\r\n                                                    <Grid item xs>\r\n                                                        <TextField fullWidth size='small' placeholder='Your message here...' id=\"textfield\" value={message}\r\n                                                            onChange={(event) => {\r\n                                                                setMessage(event.target.value)\r\n                                                            }}\r\n                                                        />\r\n                                                    </Grid>\r\n                                                    <Grid item>\r\n                                                        <Grid container justifyContent=\"center\" alignItems=\"center\" sx={{ height: 1 }}>\r\n                                                            <Button variant=\"contained\" type='submit'>\r\n                                                                <SendIcon />\r\n                                                            </Button>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </Box>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </TabPanel>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </Modal >\r\n            </Backdrop>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ChatBox;","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\auth.js",["108"],"import decode from \"jwt-decode\";\r\n\r\nclass AuthService {\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  loggedIn() {\r\n    const token = this.getToken();\r\n    return token ? true : false;\r\n  }\r\n\r\n  getToken() {\r\n    return localStorage.getItem(\"auth_token\");\r\n  }\r\n\r\n  login(token) {\r\n    localStorage.setItem(\"auth_token\", token);\r\n    window.location.assign(\"/feed\");\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem(\"auth_token\");\r\n    window.location.assign(\"/\");\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n ","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Logout\\index.js",[],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Home\\index.js",[],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Profile\\index.js",[],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Feed\\index.js",[],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Logout\\Logout.js",["109","110","111","112"],"import React, { useState, useEffect } from \"react\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport gql from \"graphql-tag\";\r\nimport { Button } from \"@mui/material\";\r\nimport auth from \"../../utils/auth.js\";\r\n\r\nconst LOGOUT = gql`\r\n  mutation Logout {\r\n    logout\r\n  }\r\n`;\r\n\r\nfunction LogoutForm() {\r\n  // const [logout, { data }] = useMutation(LOGOUT);\r\n  // const [isLoggedOut, setIsLoggedOut] = useState(false);\r\n\r\n  // useEffect(() => {\r\n  //   if (data) {\r\n  //     auth.logout();\r\n  //     setIsLoggedOut(true);\r\n  //   }\r\n  // }, [data]);\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    await auth.logout();\r\n  };\r\n\r\n  // if (isLoggedOut) {\r\n  //   return <p>You have successfully logged out.</p>;\r\n  // }\r\n\r\n  return (\r\n    <Button\r\n      onClick={handleSubmit}\r\n      variant=\"outlined\"\r\n      sx={{\r\n        color: \"white\",\r\n        borderColor: \"white\",\r\n        ml: \"20px\",\r\n        \"&:hover\": {\r\n          color: \"#DE4567\",\r\n          borderColor: \"#DE4567\",\r\n        },\r\n      }}\r\n    >\r\n      Logout\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport default LogoutForm;\r\n","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Home\\Home.js",[],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Profile\\Profile.js",["113","114","115","116","117","118"],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Feed\\Feed.js",["119","120","121","122"],"import * as React from \"react\";\r\nimport { Grid, Button, Card, CardHeader, CardMedia, CardContent, CardActions, Typography } from \"@mui/material\";\r\nimport ChatIcon from \"@mui/icons-material/Chat\";\r\nimport Match from \"../Matches\";\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport { QUERY_PETS, QUERY_USER, QUERY_OWNER } from \"../../utils/queries.js\";\r\nimport { CREATE_CHAT } from \"../../utils/mutations\";\r\nimport { useState, useEffect } from \"react\";\r\nimport dayjs from \"dayjs\";\r\n\r\nconst quickSort = (array) => {\r\n  // if input array is empty, it doesn't need to be sorted, so return it\r\n  // this must be in place, or the recursive function calls will never end\r\n  if (array.length <= 1) {\r\n    return array;\r\n  }\r\n\r\n  // use `.slice()` to pull a single element out of the input array at random\r\n  // this will become our pivot value, meaning we will attempt to sort the array based on a value being greater than or less than this value\r\n  const pivot = array.splice(Math.floor(Math.random() * array.length), 1);\r\n\r\n  // we create two empty arrays, one to be populated with all the values less than or equal to the pivot value (left), and the other to be populated with all of the values greater than the pivot (right)\r\n  const left = [];\r\n  const right = [];\r\n\r\n  // loop through array and push each value into the `left` or `right` arrays based on the pivot value\r\n  array.forEach((el) => {\r\n    if (el.owner <= pivot.owner) {\r\n      left.push(el);\r\n    } else {\r\n      right.push(el);\r\n    }\r\n  });\r\n\r\n  // since the array will likely not be sorted the first time going through this, we recursively call the `quickSort()` function on the `left` and `right` arrays, which will then run through this process over and over again until the input array is less than `1`...indicating the initial array has been sorted and we can return it out of the function\r\n  return quickSort(left).concat(pivot, quickSort(right));\r\n};\r\nexport default function RecipeReviewCard() {\r\n  const { loading: petsLoading, data: petsData } = useQuery(QUERY_PETS);\r\n  const petList = petsData?.pets || [];\r\n  const beforePetList = [];\r\n  if (!petsLoading) {\r\n    beforePetList.push(petList);\r\n    const updatedPetList = quickSort(beforePetList);\r\n    console.log(beforePetList);\r\n    console.log(updatedPetList);\r\n  }\r\n  const now = dayjs().format(\"YYYY-MM-DD\");\r\n  const { loading: userLoading, data: userData } = useQuery(QUERY_USER);\r\n\r\n  const [createChat] = useMutation(CREATE_CHAT);\r\n\r\n  // Creating roomID using pet's owner and user ID\r\n  const addToChat = async (event) => {\r\n    if (!petsLoading && !userLoading) {\r\n      const IdArr = []\r\n      IdArr.push(event.target.firstElementChild.id)\r\n      IdArr.push(userData.user._id)\r\n      IdArr.sort()\r\n      const roomID = IdArr.toString()\r\n      \r\n      const addChat = await createChat({\r\n        variables: { roomID: roomID }\r\n      })\r\n    }\r\n    \r\n  }\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      justifyContent=\"center\"\r\n      gap={4}\r\n      sx={{ marginTop: \"20px\", padding: \"0 20px\" }}\r\n    >\r\n      {petsLoading || userLoading ? (\r\n        <div>Loading...</div>\r\n      ) : (\r\n        <>\r\n          {petList.map((pet) => {\r\n            return (\r\n              <Grid item xs={12} sm={6} md={3} key={pet._id}>\r\n                <Card sx={{ maxWidth: 345 }}>\r\n                  <CardHeader title={pet.name} />\r\n                  <CardMedia\r\n                    component=\"img\"\r\n                    height=\"194\"\r\n                    image=\"https://repository-images.githubusercontent.com/260096455/47f1b200-8b2e-11ea-8fa1-ab106189aeb0\"\r\n                    alt=\"pet profile\"\r\n                  />\r\n                  <CardContent>\r\n                    <Match pet={pet} userData={userData} />\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Age: {dayjs(now).diff(dayjs(pet.birthday), \"year\")}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Species: {pet.species}\r\n                    </Typography>\r\n                  </CardContent>\r\n                  <CardActions disableSpacing sx={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                    <Button variant=\"contained\" endIcon={<ChatIcon />} onClick={addToChat}>\r\n                      ADD TO CHAT\r\n                      <input hidden={true} id={pet.owner}></input>\r\n                    </Button>\r\n                  </CardActions>\r\n                </Card>\r\n              </Grid>\r\n            );\r\n          })}\r\n        </>\r\n      )}\r\n    </Grid>\r\n  );\r\n}\r\n","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Login\\index.js",[],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Login\\Login.js",["123","124"],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\mutations.js",["125","126"],"import { gql, useMutation } from \"@apollo/client\";\r\n\r\nexport const REGISTER_USER = gql`\r\n  mutation register(\r\n    $first_name: String!\r\n    $last_name: String!\r\n    $email: String!\r\n    $password: String!\r\n    $location: String!\r\n  ) {\r\n    register(\r\n      first_name: $first_name\r\n      last_name: $last_name\r\n      email: $email\r\n      password: $password\r\n      location: $location\r\n    ) {\r\n      token\r\n      user {\r\n        _id\r\n        first_name\r\n        last_name\r\n        email\r\n        location\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const LOGIN_USER = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        first_name\r\n        last_name\r\n        email\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst LOGOUT_MUTATION = gql`\r\n  mutation LogoutMutation {\r\n    logout\r\n  }\r\n`;\r\n\r\nexport const ADD_PET = gql`\r\n  mutation addPet(\r\n    $name: String!\r\n    $species: String!\r\n    $birthday: Date!\r\n    $pictures: String!\r\n    $owner: ID\r\n  ) {\r\n    addPet(\r\n      name: $name\r\n      species: $species\r\n      birthday: $birthday\r\n      pictures: $pictures\r\n      owner: $owner\r\n    ) {\r\n      _id\r\n      name\r\n      species\r\n      birthday\r\n      pictures\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CREATE_CHAT = gql`\r\n  mutation createChat($roomID: String) {\r\n    createChat (roomID: $roomID) {\r\n      roomID\r\n      messages {\r\n        sender\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_MESSAGE = gql`\r\n  mutation addMessage($roomID: String, $message: MessageInput) {\r\n    addMessage (roomID: $roomID, message: $message) {\r\n      roomID\r\n      messages {\r\n        sender\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport function useLogoutMutation() {\r\n  const [logout, { data, loading, error }] = useMutation(LOGOUT_MUTATION);\r\n\r\n  return { logout, data, loading, error };\r\n}\r\n\r\n// uploading photo mutation\r\n\r\nconst QUERY_UPLOAD_PHOTO = `\r\n\tmutation ($formData: FormData!) {\r\n\t\tuploadProfilePicture(formData: $formData) {\r\n\t\t\tsuccess\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst formData = new FormData();\r\n\r\n// async function sendMutation() {\r\n// \tconst response = await fetch(\"/graphql\", {\r\n// \t\tmethod: \"POST\",\r\n// \t\theaders: {\r\n// \t\t\t\"Content-Type\": \"application/json\",\r\n// \t\t},\r\n// \t\tbody: JSON.stringify({\r\n// \t\t\tquery: QUERY_UPLOAD_PHOTO,\r\n// \t\t\tvariables: {\r\n// \t\t\t\tformData,\r\n// \t\t\t},\r\n// \t\t}),\r\n// \t});\r\n// \tconsole.log(response);\r\n// }\r\n// sendMutation();\r\n","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Register\\index.js",[],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Register\\Register.js",["127","128"],"import * as React from 'react';\r\nimport { useState } from \"react\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { REGISTER_USER } from \"../../utils/mutations\";\r\nimport { Modal, Box, Typography, Grid, TextField, Button } from \"@mui/material\";\r\n\r\nimport Auth from \"../../utils/auth.js\";\r\n\r\nfunction Register(props) {\r\n  const [formState, setFormState] = useState({\r\n    first_name: \"\",\r\n    last_name: \"\",\r\n    location: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const [register, { error, data }] = useMutation(REGISTER_USER);\r\n\r\n  const handleInputChange = ({ target: { name, value } }) => {\r\n    setFormState({ ...formState, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      const { data } = await register({\r\n        variables: { ...formState },\r\n      });\r\n      console.log(data);\r\n      Auth.login(data.register.token);\r\n      window.location('/Feed')\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    // Sign up modal\r\n    <Modal\r\n      open={props.open}\r\n      onClose={props.handleClose}\r\n      aria-labelledby=\"modal-modal-title\"\r\n      aria-describedby=\"modal-modal-description\"\r\n    >\r\n      <Box sx={{\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: 400,\r\n        bgcolor: 'background.paper',\r\n        boxShadow: 24,\r\n        p: 4,\r\n        \"@media (max-width: 600px)\": {\r\n          position: 'absolute',\r\n          top: '50%',\r\n          left: '50%',\r\n          transform: 'translate(-50%, -50%)',\r\n          width: '70%',\r\n          bgcolor: 'background.paper',\r\n          boxShadow: 24,\r\n          p: 4,\r\n        }\r\n      }}>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign up\r\n        </Typography>\r\n        <Box component=\"form\" noValidate onSubmit={handleFormSubmit} sx={{ mt: 3 }}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                autoComplete=\"given-name\"\r\n                name=\"first_name\"\r\n                required\r\n                fullWidth\r\n                id=\"firstName\"\r\n                label=\"First Name\"\r\n                autoFocus\r\n                value={formState.first_name}\r\n                onChange={handleInputChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                required\r\n                fullWidth\r\n                id=\"lastName\"\r\n                label=\"Last Name\"\r\n                name=\"last_name\"\r\n                autoComplete=\"family-name\"\r\n                value={formState.last_name}\r\n                onChange={handleInputChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                required\r\n                fullWidth\r\n                id=\"location\"\r\n                label=\"Location\"\r\n                name=\"location\"\r\n                autoComplete=\"location\"\r\n                value={formState.location}\r\n                onChange={handleInputChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                value={formState.email}\r\n                onChange={handleInputChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"new-password\"\r\n                value={formState.password}\r\n                onChange={handleInputChange}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            sx={{ mt: 3, mb: 2, backgroundColor: '#405C96' }}\r\n          >\r\n            Sign Up\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\AddPet\\index.js",[],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\AddPet\\AddPet.js",["129","130"],"import * as React from \"react\";\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardMedia,\r\n  CardContent,\r\n  Button,\r\n  Grid,\r\n  TextField,\r\n  Box,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { ADD_PET } from \"../../utils/mutations\";\r\n\r\nimport auth from \"../../utils/auth\";\r\n\r\nexport default function RecipeReviewCard() {\r\n  const [formState, setFormState] = React.useState({\r\n    pet_name: \"\",\r\n    species: \"\",\r\n    birthday: \"\",\r\n    pictures: \"...\",\r\n    owner: \"\",\r\n  });\r\n\r\n  const [imageFile, setImageFile] = React.useState();\r\n  const [preview, setPreview] = React.useState();\r\n  const [addPet] = useMutation(ADD_PET);\r\n\r\n  const handleInputChange = ({ target: { name, value } }) => {\r\n    setFormState({ ...formState, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      const addPetForm = await addPet({\r\n        variables: {\r\n          name: formState.pet_name,\r\n          species: formState.species,\r\n          birthday: formState.birthday,\r\n          pictures: formState.pictures,\r\n        },\r\n      });\r\n      window.location.replace(\"/Profile\");\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (!imageFile) {\r\n      setPreview(\r\n        \"https://sugarplumnannies.com/wp-content/uploads/2015/11/dog-placeholder.jpg\"\r\n      );\r\n      return;\r\n    }\r\n\r\n    const objectUrl = URL.createObjectURL(imageFile);\r\n    console.log(objectUrl);\r\n    console.log(typeof objectUrl);\r\n    setPreview(objectUrl);\r\n\r\n    return () => URL.revokeObjectURL(objectUrl);\r\n  }, [imageFile]);\r\n\r\n  const onSelectFile = (event) => {\r\n    if (!event.target.files || event.target.files.length === 0) {\r\n      setImageFile(undefined);\r\n      return;\r\n    }\r\n\r\n    setImageFile(event.target.files[0]);\r\n  };\r\n\r\n  return (\r\n    <Card sx={{ maxWidth: 500, margin: \"50px auto\" }}>\r\n      <CardHeader title=\"Add a new pet!\" sx={{ textAlign: \"center\" }} />\r\n      <CardMedia\r\n        component=\"img\"\r\n        height=\"300\"\r\n        image={preview}\r\n        alt=\"pet profile\"\r\n      />\r\n      <CardContent>\r\n        <Box\r\n          component=\"form\"\r\n          noValidate\r\n          onSubmit={handleFormSubmit}\r\n          sx={{ mt: 3 }}\r\n        >\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                name=\"pet_name\"\r\n                required\r\n                fullWidth\r\n                id=\"petName\"\r\n                label=\"Pet Name\"\r\n                autoFocus\r\n                value={formState.pet_name}\r\n                onChange={handleInputChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                required\r\n                fullWidth\r\n                id=\"species\"\r\n                label=\"Species\"\r\n                name=\"species\"\r\n                value={formState.species}\r\n                onChange={handleInputChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                required\r\n                fullWidth\r\n                id=\"birthday\"\r\n                label=\"Birthday\"\r\n                name=\"birthday\"\r\n                value={formState.birthday}\r\n                onChange={handleInputChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Grid container direction=\"row\" alignItems=\"center\" wrap=\"nowrap\">\r\n                <Grid item xs={4}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    component=\"label\"\r\n                    startIcon={<AddIcon />}\r\n                  >\r\n                    Add Image\r\n                    <input\r\n                      hidden\r\n                      accept=\"image/*\"\r\n                      multiple\r\n                      type=\"file\"\r\n                      onChange={onSelectFile}\r\n                    />\r\n                  </Button>\r\n                </Grid>\r\n                <Typography noWrap>No File Chosen</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container justifyContent=\"center\">\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2, backgroundColor: \"#405C96\", right: \"0\" }}\r\n            >\r\n              Save\r\n            </Button>\r\n          </Grid>\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\queries.js",[],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Matches\\index.js",[],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Matches\\Match.js",["131","132"],"import { useQuery } from \"@apollo/client\";\r\nimport { QUERY_USER, QUERY_OWNER } from \"../../utils/queries\";\r\nimport { getDistance } from \"geolib\";\r\nimport auth from \"../../utils/auth.js\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { useState } from \"react\";\r\n\r\nasync function findLatLon(city) {\r\n  let latLon = { lat: \"\", lon: \"\" };\r\n  const geoAPI = `https://api.openweathermap.org/geo/1.0/direct?q=${city}&appid=1560a07c19638ebfb003c32577cdfee1`;\r\n  let response = await fetch(geoAPI);\r\n  let data = await response.json();\r\n  latLon.lat = data[0].lat;\r\n  latLon.lon = data[0].lon;\r\n  return latLon;\r\n}\r\n\r\nasync function distanceCalc(userLocation, otherLocation) {\r\n  let location1 = userLocation.toLowerCase();\r\n  location1 = location1.replace(\" \", \"_\");\r\n  let location2 = otherLocation.toLowerCase();\r\n  location2 = location2.replace(\" \", \"_\");\r\n  const userLatLon = await findLatLon(location1);\r\n  const otherLatLon = await findLatLon(location2);\r\n  const userLat = userLatLon.lat;\r\n  const userLon = userLatLon.lon;\r\n  const otherLat = otherLatLon.lat;\r\n  const otherLon = otherLatLon.lon;\r\n  let distance = getDistance(\r\n    { latitude: userLat, longitude: userLon },\r\n    { latitude: otherLat, longitude: otherLon }\r\n  );\r\n  distance = distance / 1609;\r\n  const finalDistance = Math.round(distance);\r\n  return finalDistance;\r\n}\r\n\r\nfunction Match(props) {\r\n  const [distance, setDistance] = useState(0);\r\n  const { loading: ownerLoading, data: ownerData } = useQuery(QUERY_OWNER, {\r\n    variables: { ownerId: props.pet.owner },\r\n  });\r\n  const owner = ownerData?.owner || {};\r\n  const ownerLocation = owner.location;\r\n  const userLocation = props.userData.user.location;\r\n  function calculateDistance() {\r\n    distanceCalc(ownerLocation, userLocation).then((res) => {\r\n      setDistance(res);\r\n    });\r\n  }\r\n  return (\r\n    <>\r\n      {ownerLoading ? (\r\n        <div>Loading...</div>\r\n      ) : (\r\n        <>\r\n          {calculateDistance()}\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            Owner: {owner.first_name} {owner.last_name}\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            {distance} Miles Away\r\n          </Typography>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\n// findLatLon(\"fountain_valley\");\r\n\r\nexport default Match;\r\n",{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","severity":1,"message":"138","line":84,"column":22,"nodeType":"139","messageId":"140","endLine":84,"endColumn":37},{"ruleId":"137","severity":1,"message":"141","line":88,"column":22,"nodeType":"139","messageId":"140","endLine":88,"endColumn":36},{"ruleId":"142","severity":1,"message":"143","line":133,"column":8,"nodeType":"144","endLine":133,"endColumn":16,"suggestions":"145"},{"ruleId":"146","severity":1,"message":"147","line":28,"column":1,"nodeType":"148","endLine":28,"endColumn":34},{"ruleId":"137","severity":1,"message":"149","line":1,"column":17,"nodeType":"139","messageId":"140","endLine":1,"endColumn":25},{"ruleId":"137","severity":1,"message":"150","line":1,"column":27,"nodeType":"139","messageId":"140","endLine":1,"endColumn":36},{"ruleId":"137","severity":1,"message":"151","line":2,"column":10,"nodeType":"139","messageId":"140","endLine":2,"endColumn":21},{"ruleId":"137","severity":1,"message":"152","line":7,"column":7,"nodeType":"139","messageId":"140","endLine":7,"endColumn":13},{"ruleId":"137","severity":1,"message":"153","line":4,"column":8,"nodeType":"139","messageId":"140","endLine":4,"endColumn":18},{"ruleId":"137","severity":1,"message":"154","line":7,"column":10,"nodeType":"139","messageId":"140","endLine":7,"endColumn":22},{"ruleId":"137","severity":1,"message":"155","line":8,"column":10,"nodeType":"139","messageId":"140","endLine":8,"endColumn":18},{"ruleId":"137","severity":1,"message":"156","line":26,"column":7,"nodeType":"139","messageId":"140","endLine":26,"endColumn":18},{"ruleId":"157","severity":1,"message":"158","line":30,"column":9,"nodeType":"159","endLine":30,"endColumn":14},{"ruleId":"157","severity":1,"message":"158","line":34,"column":7,"nodeType":"159","endLine":34,"endColumn":12},{"ruleId":"137","severity":1,"message":"160","line":6,"column":34,"nodeType":"139","messageId":"140","endLine":6,"endColumn":45},{"ruleId":"137","severity":1,"message":"149","line":8,"column":10,"nodeType":"139","messageId":"140","endLine":8,"endColumn":18},{"ruleId":"137","severity":1,"message":"150","line":8,"column":20,"nodeType":"139","messageId":"140","endLine":8,"endColumn":29},{"ruleId":"137","severity":1,"message":"161","line":62,"column":13,"nodeType":"139","messageId":"140","endLine":62,"endColumn":20},{"ruleId":"137","severity":1,"message":"162","line":26,"column":19,"nodeType":"139","messageId":"140","endLine":26,"endColumn":24},{"ruleId":"137","severity":1,"message":"163","line":26,"column":26,"nodeType":"139","messageId":"140","endLine":26,"endColumn":30},{"ruleId":"137","severity":1,"message":"164","line":106,"column":7,"nodeType":"139","messageId":"140","endLine":106,"endColumn":25},{"ruleId":"137","severity":1,"message":"165","line":114,"column":7,"nodeType":"139","messageId":"140","endLine":114,"endColumn":15},{"ruleId":"137","severity":1,"message":"162","line":18,"column":22,"nodeType":"139","messageId":"140","endLine":18,"endColumn":27},{"ruleId":"137","severity":1,"message":"163","line":18,"column":29,"nodeType":"139","messageId":"140","endLine":18,"endColumn":33},{"ruleId":"137","severity":1,"message":"166","line":17,"column":8,"nodeType":"139","messageId":"140","endLine":17,"endColumn":12},{"ruleId":"137","severity":1,"message":"167","line":39,"column":13,"nodeType":"139","messageId":"140","endLine":39,"endColumn":23},{"ruleId":"137","severity":1,"message":"168","line":2,"column":10,"nodeType":"139","messageId":"140","endLine":2,"endColumn":20},{"ruleId":"137","severity":1,"message":"166","line":4,"column":8,"nodeType":"139","messageId":"140","endLine":4,"endColumn":12},"no-native-reassign",["169"],"no-negated-in-lhs",["170"],"no-unused-vars","'userChatLoading' is assigned a value but never used.","Identifier","unusedVar","'friendsLoading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has an unnecessary dependency: 'socket'. Either exclude it or remove the dependency array. Outer scope values like 'socket' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["171"],"import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration","'useState' is defined but never used.","'useEffect' is defined but never used.","'useMutation' is defined but never used.","'LOGOUT' is assigned a value but never used.","'Typography' is defined but never used.","'QUERY_MYPETS' is defined but never used.","'useQuery' is defined but never used.","'petProfiles' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'QUERY_OWNER' is defined but never used.","'addChat' is assigned a value but never used.","'error' is assigned a value but never used.","'data' is assigned a value but never used.","'QUERY_UPLOAD_PHOTO' is assigned a value but never used.","'formData' is assigned a value but never used.","'auth' is defined but never used.","'addPetForm' is assigned a value but never used.","'QUERY_USER' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"172","fix":"173"},"Update the dependencies array to be: []",{"range":"174","text":"175"},[4053,4061],"[]"]
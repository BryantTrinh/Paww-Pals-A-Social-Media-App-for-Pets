<<<<<<< HEAD
<<<<<<< HEAD
[{"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\index.js":"1","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\App.js":"2","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\components\\Navbar.js":"3","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\components\\ChatBox.js":"4","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\auth.js":"5","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Logout\\index.js":"6","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\components\\mobileChatBox.js":"7","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Home\\index.js":"8","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Profile\\index.js":"9","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Feed\\index.js":"10","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Logout\\Logout.js":"11","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Home\\Home.js":"12","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Profile\\Profile.js":"13","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Feed\\Feed.js":"14","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Login\\index.js":"15","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Login\\Login.js":"16","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\mutations.js":"17","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Register\\index.js":"18","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Register\\Register.js":"19"},{"size":219,"mtime":1675358476011,"results":"20","hashOfConfig":"21"},{"size":1266,"mtime":1675358476008,"results":"22","hashOfConfig":"21"},{"size":4602,"mtime":1675358476010,"results":"23","hashOfConfig":"21"},{"size":8571,"mtime":1675361359061,"results":"24","hashOfConfig":"21"},{"size":497,"mtime":1675360793607,"results":"25","hashOfConfig":"21"},{"size":39,"mtime":1675358476016,"results":"26","hashOfConfig":"21"},{"size":5320,"mtime":1675361359062,"results":"27","hashOfConfig":"21"},{"size":37,"mtime":1675105307904,"results":"28","hashOfConfig":"21"},{"size":42,"mtime":1675358476019,"results":"29","hashOfConfig":"21"},{"size":32,"mtime":1675358476013,"results":"30","hashOfConfig":"21"},{"size":925,"mtime":1675360793605,"results":"31","hashOfConfig":"21"},{"size":663,"mtime":1675358476013,"results":"32","hashOfConfig":"21"},{"size":2671,"mtime":1675360793607,"results":"33","hashOfConfig":"21"},{"size":5235,"mtime":1675360793603,"results":"34","hashOfConfig":"21"},{"size":38,"mtime":1675105307904,"results":"35","hashOfConfig":"21"},{"size":3084,"mtime":1675360793604,"results":"36","hashOfConfig":"21"},{"size":1473,"mtime":1675358476022,"results":"37","hashOfConfig":"21"},{"size":41,"mtime":1675105307905,"results":"38","hashOfConfig":"21"},{"size":4145,"mtime":1675358476020,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1obk5xj",{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\index.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\App.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\components\\Navbar.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\components\\ChatBox.js",["83"],"import * as React from 'react';\nimport ForumIcon from '@mui/icons-material/Forum';\nimport SendIcon from '@mui/icons-material/Send';\nimport { Modal, Typography, Box, Grid, TextField, Backdrop, Avatar, Stack, Button } from '@mui/material';\nimport BasicTabs from './mobileChatBox'\n\nimport io from 'socket.io-client'\nconst socket = io.connect('http://localhost:3001');\n\n// Colored avatars with initials\nfunction stringToColor(string) {\n    let hash = 0;\n    let i;\n    for (i = 0; i < string.length; i += 1) {\n        hash = string.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    let color = '#';\n    for (i = 0; i < 3; i += 1) {\n        const value = (hash >> (i * 8)) & 0xff;\n        color += `00${value.toString(16)}`.slice(-2);\n    }\n    return color;\n}\n\nfunction stringAvatar(name) {\n    return {\n        sx: {\n            bgcolor: stringToColor(name),\n        },\n        children: `${name.split(' ')[0][0]}${name.split(' ')[1][0]}`,\n    };\n}\n\nfunction ChatBox() {\n    // Show chat box modal use state\n    const [open, setOpen] = React.useState(false);\n    const handleOpen = () => {\n        setOpen(true);\n    };\n    const handleClose = () => setOpen(false);\n\n    const userMessageStyle = {\n        color: \"white\",\n        lineHeight: \"1.5\",\n        backgroundColor: \"primary.main\",\n        m: \"10px 10px 20px 10px\",\n        p: \"5px 20px\",\n        borderRadius: \"16px 16px 0 16px\",\n        maxWidth: \"40%\",\n        overflowWrap: \"break-word\",\n    }\n\n    const friendMessageStyle = {\n        color: \"black\",\n        lineHeight: \"1.5\",\n        backgroundColor: \"grey.400\",\n        m: \"10px 10px 20px 10px\",\n        p: \"5px 20px\",\n        borderRadius: \"16px 16px 16px 0px\",\n        maxWidth: \"40%\",\n        overflowWrap: \"break-word\"\n    }\n\n    const [message, setMessage] = React.useState('');\n    const [messageReceived, setMessageReceived] = React.useState([]);\n\n    const sendMessage = () => {\n        if (message === '') {\n            return\n        }\n        socket.emit(\"sendMessage\", { message });\n    }\n\n    React.useEffect(() => {\n        socket.on(\"receiveMessage\", (data) => {\n            setMessageReceived(data);\n            setMessage('')\n        })\n    }, [socket])\n\n    function ChatBubble(props) {\n        return (\n            <Grid container justifyContent=\"flex-end\">\n                <Typography variant=\"h6\" component=\"div\"\n                    sx={userMessageStyle}>\n                    {props.message}\n                </Typography>\n            </Grid>\n        )\n    }\n\n    return (\n        <>\n            <ForumIcon\n                sx={{\n                    position: \"fixed\",\n                    zIndex: 50,\n                    right: \"3%\",\n                    bottom: \"3%\",\n                    width: 40,\n                    height: 40,\n                    \"&:hover\": {\n                        cursor: \"pointer\"\n                    }\n                }}\n                onClick={handleOpen}\n            />\n            <Backdrop sx={{ color: '#fff', zIndex: 10 }}\n                open={open}\n            >\n                <Modal\n                    open={open}\n                    onClose={handleClose}\n                    aria-labelledby=\"modal-modal-title\"\n                    aria-describedby=\"modal-modal-description\"\n                    sx={{ height: \"100vh\" }}\n                >\n                    <Box sx={{\n                        position: 'absolute',\n                        top: '50%',\n                        left: '50%',\n                        transform: 'translate(-50%, -50%)',\n                        width: \"70%\",\n                        height: \"70%\",\n                        bgcolor: 'background.paper',\n                        boxShadow: 24,\n                        p: 2,\n                        borderRadius: 5\n                    }}>\n                        {/* Medium screen breakpoint chat layout */}\n                        <Grid container sx={{ height: \"100%\", display: { xs: \"none\", md: \"flex\" } }}>\n                            <Grid item sm={3} sx={{\n                                borderRight: \"2px solid #E4E4E4\",\n                                p: \"0 16px 0 0\"\n                            }}>\n                                <Typography variant=\"h6\" component=\"h2\" sx={{ textAlign: \"center\", marginBottom: \"20px\" }}>\n                                    Chats\n                                </Typography>\n                                {/* TODO: Map over chats */}\n                                <Stack direction=\"row\" spacing={2} sx={{ borderTop: \"2px solid #E4E4E4\", p: \"5px\", \"&:hover\": { cursor: \"pointer\" } }}>\n                                    <Avatar {...stringAvatar('John Doe')} />\n                                    <Grid container alignItems=\"center\">\n                                        <Typography sx={{ lineHeight: \"1\", fontSize: \"14px\" }}>Last message from John Doe.</Typography>\n                                    </Grid>\n                                </Stack>\n                                <Stack direction=\"row\" spacing={2} sx={{ borderTop: \"2px solid #E4E4E4\", p: \"5px\", \"&:hover\": { cursor: \"pointer\" } }}>\n                                    <Avatar {...stringAvatar('Tim Doe')} />\n                                    <Grid container alignItems=\"center\">\n                                        <Typography sx={{ lineHeight: \"1\", fontSize: \"14px\" }}>Last message from Tim Doe.</Typography>\n                                    </Grid>\n                                </Stack>\n                            </Grid>\n                            <Grid item sm={9} sx={{\n                                p: \"0 0 0 16px\",\n                                height: \"100%\"\n                            }}>\n                                <Grid container direction=\"column\" justifyContent=\"flex-end\" sx={{ height: \"100%\", flexWrap: \"nowrap\" }}>\n                                    <Grid item sx={{ overflow: \"auto\" }} id=\"messageField\">\n                                        {messageReceived.map((data) => <ChatBubble key={data.message} socketID={data.socketID} message={data.message} />)}\n                                    </Grid>\n                                    <Grid item>\n                                        <Box component=\"form\"\n                                            onSubmit={(event) => {\n                                                event.preventDefault();\n                                                sendMessage()\n                                            }}\n                                        >\n                                            <Grid container justifyContent=\"center\" gap={1}>\n                                                <Grid item xs>\n                                                    <TextField fullWidth size='small' placeholder='Your message here...' id=\"textfield\" value={message}\n                                                        onChange={(event) => {\n                                                            setMessage(event.target.value)\n                                                        }}\n                                                    />\n                                                </Grid>\n                                                <Grid item xs={2}>\n                                                    <Grid container justifyContent=\"center\" alignItems=\"center\" sx={{ height: 1 }}>\n                                                        <Button variant=\"contained\" endIcon={<SendIcon />} type='submit'>\n                                                            Send\n                                                        </Button>\n                                                    </Grid>\n                                                </Grid>\n                                            </Grid>\n                                        </Box>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        {/* Small screen breakpoint chat layout */}\n                        <Grid container sx={{ height: \"100%\", display: { xs: \"flex\", md: \"none\" } }}>\n                            <BasicTabs\n                                stringAvatar={stringAvatar}\n                                friendMessageStyle={friendMessageStyle}\n                                userMessageStyle={userMessageStyle}\n                            />\n                        </Grid>\n                    </Box>\n                </Modal >\n            </Backdrop>\n        </>\n    )\n}\n\nexport default ChatBox;","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\auth.js",["84"],"import decode from \"jwt-decode\";\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    const token = this.getToken();\n    return token ? true : false;\n  }\n\n  getToken() {\n    return localStorage.getItem(\"auth_token\");\n  }\n\n  login(token) {\n    localStorage.setItem(\"auth_token\", token);\n    window.location.assign(\"/\");\n  }\n\n  logout() {\n    localStorage.removeItem(\"auth_token\");\n    window.location.reload();\n  }\n}\n\nexport default new AuthService();\n ","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Logout\\index.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\components\\mobileChatBox.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Home\\index.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Profile\\index.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Feed\\index.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Logout\\Logout.js",["85"],"import React, { useState, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { Button } from \"@mui/material\";\nimport auth from \"../../utils/auth.js\";\n\nconst LOGOUT = gql`\n  mutation Logout {\n    logout\n  }\n`;\n\nfunction LogoutForm() {\n  const [logout, { data }] = useMutation(LOGOUT);\n  const [isLoggedOut, setIsLoggedOut] = useState(false);\n\n\tuseEffect(() => {\n\t\tif (data) {\n\t\t\tauth.logout();\n\t\t\tsetIsLoggedOut(true);\n\t\t}\n\t}, [data]);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    await logout();\n  };\n\n  if (isLoggedOut) {\n    return <p>You have successfully logged out.</p>;\n  }\n\n\treturn (\n\t\t<Button variant=\"outlined\"\n\t\t\tsx={{\n\t\t\t\tcolor: \"white\",\n\t\t\t\tborderColor: \"white\",\n\t\t\t\tml: \"20px\",\n\t\t\t\t\"&:hover\": {\n\t\t\t\t\tcolor: \"#DE4567\",\n\t\t\t\t\tborderColor: \"#DE4567\",\n\t\t\t\t}\n\t\t\t}}\n\t\t\t\n\t\t>\n\t\t\tLogout\n\t\t</Button>\n\t);\n}\n\nexport default LogoutForm;\n","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Home\\Home.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Profile\\Profile.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Feed\\Feed.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Login\\index.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Login\\Login.js",["86","87"],"import * as React from 'react';\nimport { useState } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { LOGIN_USER } from \"../../utils/mutations\";\nimport { Grid, Box, Avatar, Typography, TextField, Button, Link, Paper } from '@mui/material';\nimport PetsIcon from '@mui/icons-material/Pets';\n\n\nimport Auth from \"../../utils/auth.js\";\nimport Register from '../Register';\n\nfunction Login() {\n  const [formState, setFormState] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  const [Login, { error, data }] = useMutation(LOGIN_USER);\n\n  const handleInputChange = ({ target: { name, value } }) => {\n    setFormState({ ...formState, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await Login({\n        variables: { ...formState },\n      });\n\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // Show sign up modal use state\n  const [open, setOpen] = React.useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  return (\n    <>\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square\n        sx={{\n          backgroundColor: '#F8F5F2'\n        }}>\n        <Box\n          sx={{\n            my: 8,\n            mx: 4,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            backgroundColor: '#F8F5F2'\n          }}\n        >\n          <Avatar sx={{ m: 1, bgcolor: '#DE4567' }}>\n            <PetsIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            LOG IN\n          </Typography>\n          <Box component=\"form\" noValidate onSubmit={handleFormSubmit} sx={{ mt: 1 }}>\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Email Address\"\n              name=\"email\"\n              autoComplete=\"email\"\n              autoFocus\n              value={formState.email}\n              onChange={handleInputChange}\n            />\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n              value={formState.password}\n              onChange={handleInputChange}\n            />\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2, backgroundColor: '#405C96' }}\n            >\n              LOG IN\n            </Button>\n            <Grid container>\n              <Grid item>\n                <Link onClick={handleOpen} variant=\"body2\">\n                  {\"Don't have an account? Sign Up\"}\n                </Link>\n              </Grid>\n            </Grid>\n          </Box>\n        </Box>\n      </Grid>\n      <Register handleClose={handleClose} open={open} />\n    </>\n  );\n}\n\nexport default Login;\n","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\mutations.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Register\\index.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Register\\Register.js",["88","89"],"import * as React from 'react';\nimport { useState } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { REGISTER_USER } from \"../../utils/mutations\";\nimport { Modal, Box, Typography, Grid, TextField, Button } from \"@mui/material\";\n\nimport Auth from \"../../utils/auth.js\";\n\nfunction Register(props) {\n  const [formState, setFormState] = useState({\n    first_name: \"\",\n    last_name: \"\",\n    location: \"\",\n    email: \"\",\n    password: \"\",\n  });\n\n  const [register, { error, data }] = useMutation(REGISTER_USER);\n\n  const handleInputChange = ({ target: { name, value } }) => {\n    setFormState({ ...formState, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await register({\n        variables: { ...formState },\n      });\n      console.log(data);\n      Auth.login(data.register.token);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    // Sign up modal\n    <Modal\n      open={props.open}\n      onClose={props.handleClose}\n      aria-labelledby=\"modal-modal-title\"\n      aria-describedby=\"modal-modal-description\"\n    >\n      <Box sx={{\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        width: 400,\n        bgcolor: 'background.paper',\n        boxShadow: 24,\n        p: 4,\n        \"@media (max-width: 600px)\": {\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          width: '70%',\n          bgcolor: 'background.paper',\n          boxShadow: 24,\n          p: 4,\n        }\n      }}>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign up\n        </Typography>\n        <Box component=\"form\" noValidate onSubmit={handleFormSubmit} sx={{ mt: 3 }}>\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                autoComplete=\"given-name\"\n                name=\"first_name\"\n                required\n                fullWidth\n                id=\"firstName\"\n                label=\"First Name\"\n                autoFocus\n                value={formState.first_name}\n                onChange={handleInputChange}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                required\n                fullWidth\n                id=\"lastName\"\n                label=\"Last Name\"\n                name=\"last_name\"\n                autoComplete=\"family-name\"\n                value={formState.last_name}\n                onChange={handleInputChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                required\n                fullWidth\n                id=\"location\"\n                label=\"Location\"\n                name=\"location\"\n                autoComplete=\"location\"\n                value={formState.location}\n                onChange={handleInputChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                autoComplete=\"email\"\n                value={formState.email}\n                onChange={handleInputChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"new-password\"\n                value={formState.password}\n                onChange={handleInputChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n            </Grid>\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            sx={{ mt: 3, mb: 2, backgroundColor: '#405C96' }}\n          >\n            Sign Up\n          </Button>\n        </Box>\n      </Box>\n    </Modal>\n  );\n}\n\nexport default Register;\n",{"ruleId":"90","severity":1,"message":"91","line":79,"column":8,"nodeType":"92","endLine":79,"endColumn":16,"suggestions":"93"},{"ruleId":"94","severity":1,"message":"95","line":28,"column":1,"nodeType":"96","endLine":28,"endColumn":34},{"ruleId":"97","severity":1,"message":"98","line":24,"column":9,"nodeType":"99","messageId":"100","endLine":24,"endColumn":21},{"ruleId":"97","severity":1,"message":"101","line":18,"column":19,"nodeType":"99","messageId":"100","endLine":18,"endColumn":24},{"ruleId":"97","severity":1,"message":"102","line":18,"column":26,"nodeType":"99","messageId":"100","endLine":18,"endColumn":30},{"ruleId":"97","severity":1,"message":"101","line":18,"column":22,"nodeType":"99","messageId":"100","endLine":18,"endColumn":27},{"ruleId":"97","severity":1,"message":"102","line":18,"column":29,"nodeType":"99","messageId":"100","endLine":18,"endColumn":33},"react-hooks/exhaustive-deps","React Hook React.useEffect has an unnecessary dependency: 'socket'. Either exclude it or remove the dependency array. Outer scope values like 'socket' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["103"],"import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'handleSubmit' is assigned a value but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","'data' is assigned a value but never used.",{"desc":"104","fix":"105"},"Update the dependencies array to be: []",{"range":"106","text":"107"},[2172,2180],"[]"]
=======
[{"C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\index.js":"1","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\App.js":"2","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\components\\Navbar.js":"3","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\components\\ChatBox.js":"4","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Logout\\index.js":"5","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\auth.js":"6","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Home\\index.js":"7","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Feed\\index.js":"8","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\AddPet\\index.js":"9","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Profile\\index.js":"10","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Home\\Home.js":"11","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Profile\\Profile.js":"12","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Logout\\Logout.js":"13","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Feed\\Feed.js":"14","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\AddPet\\AddPet.js":"15","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\queries.js":"16","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Login\\index.js":"17","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Login\\Login.js":"18","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Matches\\index.js":"19","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Matches\\Match.js":"20","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\mutations.js":"21","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Register\\index.js":"22","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Register\\Register.js":"23"},{"size":219,"mtime":1675115792555,"results":"24","hashOfConfig":"25"},{"size":1401,"mtime":1675623674523,"results":"26","hashOfConfig":"25"},{"size":4741,"mtime":1675284657373,"results":"27","hashOfConfig":"25"},{"size":14824,"mtime":1675621838771,"results":"28","hashOfConfig":"25"},{"size":39,"mtime":1675125975395,"results":"29","hashOfConfig":"25"},{"size":504,"mtime":1675371071623,"results":"30","hashOfConfig":"25"},{"size":37,"mtime":1675112157206,"results":"31","hashOfConfig":"25"},{"size":32,"mtime":1675277546125,"results":"32","hashOfConfig":"25"},{"size":34,"mtime":1675361878286,"results":"33","hashOfConfig":"25"},{"size":42,"mtime":1675194437731,"results":"34","hashOfConfig":"25"},{"size":663,"mtime":1675189141344,"results":"35","hashOfConfig":"25"},{"size":2764,"mtime":1675461285907,"results":"36","hashOfConfig":"25"},{"size":1054,"mtime":1675371071620,"results":"37","hashOfConfig":"25"},{"size":4488,"mtime":1675461285904,"results":"38","hashOfConfig":"25"},{"size":4371,"mtime":1675461285902,"results":"39","hashOfConfig":"25"},{"size":1347,"mtime":1675547819830,"results":"40","hashOfConfig":"25"},{"size":38,"mtime":1675112157206,"results":"41","hashOfConfig":"25"},{"size":3262,"mtime":1675371071619,"results":"42","hashOfConfig":"25"},{"size":38,"mtime":1675189199380,"results":"43","hashOfConfig":"25"},{"size":2264,"mtime":1675461285905,"results":"44","hashOfConfig":"25"},{"size":2317,"mtime":1675547826970,"results":"45","hashOfConfig":"25"},{"size":41,"mtime":1675112157207,"results":"46","hashOfConfig":"25"},{"size":4124,"mtime":1675373369452,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1pzswbn",{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"50"},"C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\index.js",[],["105","106"],"C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\App.js",[],"C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\components\\Navbar.js",[],"C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\components\\ChatBox.js",["107","108","109"],"import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ForumIcon from '@mui/icons-material/Forum';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport { Modal, Typography, Box, Grid, TextField, Backdrop, Button, Tabs, Tab } from '@mui/material';\r\nimport { useQuery } from '@apollo/client'\r\nimport { QUERY_USER_CHATS, QUERY_FRIENDS_LIST } from '../utils/queries';\r\n\r\nimport auth from '../utils/auth'\r\n\r\nimport io from 'socket.io-client'\r\nconst socket = io.connect('http://localhost:3001');\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}\r\n            style={{ height: \"92%\" }}\r\n        >\r\n            {value === index && (\r\n                <Box sx={{ height: \"100%\" }}>\r\n                    <Box sx={{ height: \"100%\" }}>{children}</Box>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.number.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `simple-tab-${index}`,\r\n        'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nfunction ChatBox() {\r\n    // Show chat box modal use state\r\n    const [open, setOpen] = React.useState(false);\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => setOpen(false);\r\n\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const userMessageStyle = {\r\n        color: \"white\",\r\n        lineHeight: \"1.5\",\r\n        backgroundColor: \"primary.main\",\r\n        m: \"10px 10px 20px 10px\",\r\n        p: \"5px 20px\",\r\n        borderRadius: \"16px 16px 0 16px\",\r\n        maxWidth: \"40%\",\r\n        overflowWrap: \"break-word\",\r\n    }\r\n\r\n    const friendMessageStyle = {\r\n        color: \"black\",\r\n        lineHeight: \"1.5\",\r\n        backgroundColor: \"grey.400\",\r\n        m: \"10px 10px 20px 10px\",\r\n        p: \"5px 20px\",\r\n        borderRadius: \"16px 16px 16px 0px\",\r\n        maxWidth: \"40%\",\r\n        overflowWrap: \"break-word\"\r\n    }\r\n\r\n    // Getting array of user's chats\r\n    const { loading: userChatLoading, data: userChats } = useQuery(QUERY_USER_CHATS);\r\n    const myId = userChats?.getUserChats._id || \"\";\r\n\r\n    // Getting array of friends object ID\r\n    const { loading: friendsLoading, data: userFriends } = useQuery(QUERY_FRIENDS_LIST, {\r\n        variables: { ownerId: myId }\r\n    })\r\n    const userFriendsList = userFriends?.owner.friends || []\r\n\r\n    // Socket.io stuff\r\n    const [message, setMessage] = React.useState('');\r\n    const [messageReceived, setMessageReceived] = React.useState([]);\r\n    const [room, setRoom] = React.useState('')\r\n    const [chatAnnounce, setChatAnnounce] = React.useState('')\r\n    const [chatStyle, setChatStyle] = React.useState('')\r\n\r\n    const ChatBubblesRef = React.useRef(null);\r\n\r\n    // Logic to create chatroom ID\r\n    const createChatRoomID = (event) => {\r\n        const IdArr = []\r\n        IdArr.push(event.target.firstElementChild.id)\r\n        IdArr.push(myId)\r\n        IdArr.sort()\r\n        const roomID = IdArr.toString()\r\n\r\n        setChatAnnounce(`You're in a chat with ${event.target.id}`)\r\n        setRoom(roomID)\r\n        setChatStyle(event.target.firstElementChild.id)\r\n        setValue(1)\r\n\r\n        socket.emit('joinRoom', roomID);\r\n    }\r\n\r\n    const sendMessage = () => {\r\n        if (message === '') {\r\n            return\r\n        } else if (room === '') {\r\n            console.log(\"You're not in a room!\");\r\n            return\r\n        }\r\n        socket.emit(\"sendMessage\", { message, myId, room });\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        socket.on(\"receiveMessage\", (data) => {\r\n            setMessageReceived(data);\r\n            setMessage('')\r\n        })\r\n    }, [socket])\r\n\r\n    React.useEffect(() => {\r\n        ChatBubblesRef.current?.scrollIntoView()\r\n    }, [messageReceived])\r\n\r\n    // React components to map\r\n    function DisplayChats(props) {\r\n        return (\r\n            <>\r\n                <Box sx={{ height: '2px', marginBottom: '5px', backgroundColor: '#E4E4E4' }}></Box>\r\n                <Button variant={chatStyle === props.friendID ? 'contained' : 'text'} sx={{ width: '100%', marginBottom: '5px' }} onClick={createChatRoomID} id={props.fullName}>\r\n                    <input hidden={true} id={props.friendID} />\r\n                    {props.fullName}\r\n                </Button>\r\n            </>\r\n        )\r\n    }\r\n\r\n    function ChatBubble(props) {\r\n        const timeStamp = new Date(props.timeStamp)\r\n        const timeSetting = {\r\n            month: \"2-digit\",\r\n            day: \"2-digit\",\r\n            year: \"2-digit\",\r\n            hour: \"2-digit\",\r\n            minute: \"2-digit\"\r\n        }\r\n        const newTimeStamp = timeStamp.toLocaleDateString('en-US', timeSetting).split(',').join('')\r\n\r\n        return (\r\n            <>\r\n                <Box textAlign={props.sender === myId ? \"right\" : 'left'} fontSize=\"14px\" color=\"grey.400\">{newTimeStamp}</Box>\r\n                <Grid container justifyContent={props.sender === myId ? \"flex-end\" : 'flex-start'} >\r\n                    <Typography variant=\"h6\" component=\"div\"\r\n                        sx={props.sender === myId ? userMessageStyle : friendMessageStyle}>\r\n                        {props.message}\r\n                    </Typography>\r\n                </Grid>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {auth.loggedIn() ? (\r\n                <ForumIcon\r\n                    sx={{\r\n                        position: \"fixed\",\r\n                        zIndex: 50,\r\n                        right: \"3%\",\r\n                        bottom: \"3%\",\r\n                        width: 40,\r\n                        height: 40,\r\n                        \"&:hover\": {\r\n                            cursor: \"pointer\"\r\n                        }\r\n                    }}\r\n                    onClick={handleOpen}\r\n                />\r\n            ) : (<></>)}\r\n            <Backdrop sx={{ color: '#fff', zIndex: 10 }}\r\n                open={open}\r\n            >\r\n                <Modal\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    aria-labelledby=\"modal-modal-title\"\r\n                    aria-describedby=\"modal-modal-description\"\r\n                    sx={{ height: \"100vh\" }}\r\n                >\r\n                    <Box sx={{\r\n                        position: 'absolute',\r\n                        top: '50%',\r\n                        left: '50%',\r\n                        transform: 'translate(-50%, -50%)',\r\n                        width: \"70%\",\r\n                        height: \"70%\",\r\n                        bgcolor: 'background.paper',\r\n                        boxShadow: 24,\r\n                        p: 2,\r\n                        borderRadius: 5\r\n                    }}>\r\n                        {/* Medium screen breakpoint chat layout */}\r\n                        <Grid container sx={{ height: \"100%\", display: { xs: \"none\", md: \"flex\" } }}>\r\n                            <Grid item sm={3} sx={{\r\n                                borderRight: \"2px solid #E4E4E4\",\r\n                                p: \"0 16px 0 0\"\r\n                            }}>\r\n                                <Typography variant=\"h6\" component=\"h2\" sx={{ textAlign: \"center\", marginBottom: \"20px\" }}>\r\n                                    Chats\r\n                                </Typography>\r\n                                <Box overflow=\"auto\">\r\n                                    {userFriendsList.map((friend) => <DisplayChats key={friend._id} fullName={`${friend.first_name} ${friend.last_name}`} friendID={friend._id} />)}\r\n                                </Box>\r\n                            </Grid>\r\n                            <Grid item sm={9} sx={{\r\n                                p: \"0 0 0 16px\",\r\n                                height: \"100%\"\r\n                            }}>\r\n                                <Grid container direction=\"column\" justifyContent=\"flex-end\" sx={{ height: \"100%\", flexWrap: \"nowrap\" }}>\r\n                                    <Grid item>\r\n                                        <Typography>\r\n                                            {chatAnnounce}\r\n                                        </Typography>\r\n                                    </Grid>\r\n                                    <Grid item sx={{ overflow: \"auto\" }} >\r\n                                        {messageReceived.map((data) => <ChatBubble key={data._id} sender={data.sender} message={data.message} timeStamp={data.createdAt} />)}\r\n                                        <div ref={ChatBubblesRef} />\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Box component=\"form\"\r\n                                            onSubmit={(event) => {\r\n                                                event.preventDefault();\r\n                                                sendMessage()\r\n                                            }}\r\n                                        >\r\n                                            <Grid container justifyContent=\"center\" gap={1}>\r\n                                                <Grid item xs>\r\n                                                    <TextField fullWidth size='small' placeholder='Your message here...' id=\"textfield\" value={message}\r\n                                                        onChange={(event) => {\r\n                                                            setMessage(event.target.value)\r\n                                                        }}\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid item xs={2}>\r\n                                                    <Grid container justifyContent=\"center\" alignItems=\"center\" sx={{ height: 1 }}>\r\n                                                        <Button variant=\"contained\" endIcon={<SendIcon />} type='submit'>\r\n                                                            Send\r\n                                                        </Button>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Box>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        {/* Small screen breakpoint chat layout */}\r\n                        <Grid container sx={{ height: \"100%\", display: { xs: \"flex\", md: \"none\" } }}>\r\n                            <Grid container direction=\"column\" flexWrap='nowrap' sx={{ height: \"100%\" }}>\r\n                                <Grid item xs={1} sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n                                    <Tabs value={value} onChange={handleChange} centered>\r\n                                        <Tab label=\"Chats\" {...a11yProps(0)} />\r\n                                        <Tab label=\"Message\" {...a11yProps(1)} />\r\n                                    </Tabs>\r\n                                </Grid>\r\n                                <TabPanel value={value} index={0}>\r\n                                    {userFriendsList.map((friend) => <DisplayChats key={friend._id} fullName={`${friend.first_name} ${friend.last_name}`} friendID={friend._id} />)}\r\n                                </TabPanel>\r\n                                <TabPanel value={value} index={1} >\r\n                                    <Grid container direction=\"column\" justifyContent=\"flex-end\" flexWrap=\"nowrap\" height=\"100%\">\r\n                                        <Grid item>\r\n                                            <Typography>\r\n                                                {chatAnnounce}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item sx={{ overflow: \"auto\" }} id=\"messageField\">\r\n                                            {messageReceived.map((data) => <ChatBubble key={data._id} sender={data.sender} message={data.message} timeStamp={data.createdAt} />)}\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Box component=\"form\"\r\n                                                onSubmit={(event) => {\r\n                                                    event.preventDefault();\r\n                                                    sendMessage()\r\n                                                }}\r\n                                            >\r\n                                                <Grid container justifyContent=\"center\">\r\n                                                    <Grid item xs>\r\n                                                        <TextField fullWidth size='small' placeholder='Your message here...' id=\"textfield\" value={message}\r\n                                                            onChange={(event) => {\r\n                                                                setMessage(event.target.value)\r\n                                                            }}\r\n                                                        />\r\n                                                    </Grid>\r\n                                                    <Grid item>\r\n                                                        <Grid container justifyContent=\"center\" alignItems=\"center\" sx={{ height: 1 }}>\r\n                                                            <Button variant=\"contained\" type='submit'>\r\n                                                                <SendIcon />\r\n                                                            </Button>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </Box>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </TabPanel>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </Modal >\r\n            </Backdrop>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ChatBox;","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Logout\\index.js",[],"C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\auth.js",["110"],"import decode from \"jwt-decode\";\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    const token = this.getToken();\n    return token ? true : false;\n  }\n\n  getToken() {\n    return localStorage.getItem(\"auth_token\");\n  }\n\n  login(token) {\n    localStorage.setItem(\"auth_token\", token);\n    window.location.assign(\"/feed\");\n  }\n\n  logout() {\n    localStorage.removeItem(\"auth_token\");\n    window.location.assign(\"/\");\n  }\n}\n\nexport default new AuthService();\n ","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Home\\index.js",[],"C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Feed\\index.js",[],"C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\AddPet\\index.js",[],"C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Profile\\index.js",[],"C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Home\\Home.js",[],"C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Profile\\Profile.js",["111","112"],"import * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport Modal from \"@mui/material/Modal\";\nimport \"./Profile.css\";\nimport { QUERY_MYPETS } from \"../../utils/queries\";\nimport { useQuery } from \"@apollo/client\";\n\nconst style = {\n  position: \"absolute\",\n  top: \"50%\",\n  left: \"50%\",\n  transform: \"translate(-50%, -50%)\",\n  width: 400,\n  bgcolor: \"background.paper\",\n  border: \"2px solid #000\",\n  boxShadow: 24,\n  pt: 2,\n  px: 4,\n  pb: 3,\n};\n\nexport default function Profile() {\n  const [open, setOpen] = React.useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  return (\n    <section className=\"page\">\n      <div id=\"pets-header\">\n        <h1>Your Pets</h1>\n      </div>\n      <div className=\"pets-section\">\n        <div className=\"pets-container\">\n          <ul>\n            <li>\n              <div>\n                <Button\n                  onClick={handleOpen}\n                  sx={{\n                    padding: \"32em 32em 0 0\",\n                    margin: \"8em\",\n                    display: \"flex\",\n                    alignItems: \"flex-end\",\n                    textDecoration: \"none\",\n                    backgroundSize: \"100%\",\n                    backgroundColor: \"rgba(0, 0, 0, 0.484)\",\n                    backgroundBlendMode: \"soft-light\",\n                    transitionDuration: \"1s\",\n                    backgroundImage:\n                      'url(\"https://i.pinimg.com/564x/a5/e3/d7/a5e3d756ae332a8ca01f3ad7c0c54aa8.jpg\")',\n                    \"&:hover\": {\n                      transition: \"1s\",\n                      backgroundColor: \"rgba(0,0,0,0)\",\n                    },\n                  }}\n                >\n                  <div className=\"text-background\">\n                    <h3>Kuro</h3>\n                  </div>\n                </Button>\n                <Modal\n                  open={open}\n                  onClose={handleClose}\n                  aria-labelledby=\"modal-modal-title\"\n                  aria-describedby=\"modal-modal-description\"\n                >\n                  <Box sx={style}>\n                    <Typography\n                      id=\"modal-modal-title\"\n                      variant=\"h6\"\n                      component=\"h2\"\n                    >\n                      Meow\n                    </Typography>\n                    <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\n                      Meow.. Meow meow meow meow? meow, mewoemowmeowme..\n                    </Typography>\n                  </Box>\n                </Modal>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </section>\n  );\n}\n","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Logout\\Logout.js",["113","114","115","116"],"import React, { useState, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { Button } from \"@mui/material\";\nimport auth from \"../../utils/auth.js\";\n\nconst LOGOUT = gql`\n  mutation Logout {\n    logout\n  }\n`;\n\nfunction LogoutForm() {\n  // const [logout, { data }] = useMutation(LOGOUT);\n  // const [isLoggedOut, setIsLoggedOut] = useState(false);\n\n  // useEffect(() => {\n  //   if (data) {\n  //     auth.logout();\n  //     setIsLoggedOut(true);\n  //   }\n  // }, [data]);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    await auth.logout();\n  };\n\n  // if (isLoggedOut) {\n  //   return <p>You have successfully logged out.</p>;\n  // }\n\n  return (\n    <Button\n      onClick={handleSubmit}\n      variant=\"outlined\"\n      sx={{\n        color: \"white\",\n        borderColor: \"white\",\n        ml: \"20px\",\n        \"&:hover\": {\n          color: \"#DE4567\",\n          borderColor: \"#DE4567\",\n        },\n      }}\n    >\n      Logout\n    </Button>\n  );\n}\n\nexport default LogoutForm;\n","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Feed\\Feed.js",["117","118","119","120"],"import * as React from \"react\";\nimport { Grid, Button, Card, CardHeader, CardMedia, CardContent, CardActions, Typography } from \"@mui/material\";\nimport ChatIcon from \"@mui/icons-material/Chat\";\nimport Match from \"../Matches\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { QUERY_PETS, QUERY_USER, QUERY_OWNER } from \"../../utils/queries.js\";\nimport { CREATE_CHAT } from \"../../utils/mutations\";\nimport { useState, useEffect } from \"react\";\nimport dayjs from \"dayjs\";\n\nconst quickSort = (array) => {\n  // if input array is empty, it doesn't need to be sorted, so return it\n  // this must be in place, or the recursive function calls will never end\n  if (array.length <= 1) {\n    return array;\n  }\n\n  // use `.slice()` to pull a single element out of the input array at random\n  // this will become our pivot value, meaning we will attempt to sort the array based on a value being greater than or less than this value\n  const pivot = array.splice(Math.floor(Math.random() * array.length), 1);\n\n  // we create two empty arrays, one to be populated with all the values less than or equal to the pivot value (left), and the other to be populated with all of the values greater than the pivot (right)\n  const left = [];\n  const right = [];\n\n  // loop through array and push each value into the `left` or `right` arrays based on the pivot value\n  array.forEach((el) => {\n    if (el.owner <= pivot.owner) {\n      left.push(el);\n    } else {\n      right.push(el);\n    }\n  });\n\n  // since the array will likely not be sorted the first time going through this, we recursively call the `quickSort()` function on the `left` and `right` arrays, which will then run through this process over and over again until the input array is less than `1`...indicating the initial array has been sorted and we can return it out of the function\n  return quickSort(left).concat(pivot, quickSort(right));\n};\nexport default function RecipeReviewCard() {\n  const { loading: petsLoading, data: petsData } = useQuery(QUERY_PETS);\n  const petList = petsData?.pets || [];\n  const beforePetList = [];\n  if (!petsLoading) {\n    beforePetList.push(petList);\n    const updatedPetList = quickSort(beforePetList);\n    console.log(beforePetList);\n    console.log(updatedPetList);\n  }\n  const now = dayjs().format(\"YYYY-MM-DD\");\n  const { loading: userLoading, data: userData } = useQuery(QUERY_USER);\n\n  const [createChat] = useMutation(CREATE_CHAT);\n\n  // Creating roomID using pet's owner and user ID\n  const addToChat = async (event) => {\n    if (!petsLoading && !userLoading) {\n      const IdArr = []\n      IdArr.push(event.target.firstElementChild.id)\n      IdArr.push(userData.user._id)\n      IdArr.sort()\n      const roomID = IdArr.toString()\n      \n      const addChat = await createChat({\n        variables: { roomID: roomID }\n      })\n    }\n    \n  }\n\n  return (\n    <Grid\n      container\n      justifyContent=\"center\"\n      gap={4}\n      sx={{ marginTop: \"20px\", padding: \"0 20px\" }}\n    >\n      {petsLoading || userLoading ? (\n        <div>Loading...</div>\n      ) : (\n        <>\n          {petList.map((pet) => {\n            return (\n              <Grid item xs={12} sm={6} md={3} key={pet._id}>\n                <Card sx={{ maxWidth: 345 }}>\n                  <CardHeader title={pet.name} />\n                  <CardMedia\n                    component=\"img\"\n                    height=\"194\"\n                    image=\"https://repository-images.githubusercontent.com/260096455/47f1b200-8b2e-11ea-8fa1-ab106189aeb0\"\n                    alt=\"pet profile\"\n                  />\n                  <CardContent>\n                    <Match pet={pet} userData={userData} />\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Age: {dayjs(now).diff(dayjs(pet.birthday), \"year\")}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Species: {pet.species}\n                    </Typography>\n                  </CardContent>\n                  <CardActions disableSpacing sx={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n                    <Button variant=\"contained\" endIcon={<ChatIcon />} onClick={addToChat}>\n                      ADD TO CHAT\n                      <input hidden={true} id={pet.owner}></input>\n                    </Button>\n                  </CardActions>\n                </Card>\n              </Grid>\n            );\n          })}\n        </>\n      )}\n    </Grid>\n  );\n}\n","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\AddPet\\AddPet.js",["121","122"],"import * as React from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardMedia,\n  CardContent,\n  Button,\n  Grid,\n  TextField,\n  Box,\n  Typography,\n} from \"@mui/material\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport { useMutation } from \"@apollo/client\";\nimport { ADD_PET } from \"../../utils/mutations\";\n\nimport auth from \"../../utils/auth\";\n\nexport default function RecipeReviewCard() {\n  const [formState, setFormState] = React.useState({\n    pet_name: \"\",\n    species: \"\",\n    birthday: \"\",\n    pictures: \"...\",\n    owner: \"\",\n  });\n\n  const [imageFile, setImageFile] = React.useState();\n  const [preview, setPreview] = React.useState();\n  const [addPet] = useMutation(ADD_PET);\n\n  const handleInputChange = ({ target: { name, value } }) => {\n    setFormState({ ...formState, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const addPetForm = await addPet({\n        variables: {\n          name: formState.pet_name,\n          species: formState.species,\n          birthday: formState.birthday,\n          pictures: formState.pictures,\n        },\n      });\n      window.location.replace(\"/Profile\");\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  React.useEffect(() => {\n    if (!imageFile) {\n      setPreview(\n        \"https://sugarplumnannies.com/wp-content/uploads/2015/11/dog-placeholder.jpg\"\n      );\n      return;\n    }\n\n    const objectUrl = URL.createObjectURL(imageFile);\n    console.log(objectUrl);\n    console.log(typeof objectUrl);\n    setPreview(objectUrl);\n\n    return () => URL.revokeObjectURL(objectUrl);\n  }, [imageFile]);\n\n  const onSelectFile = (event) => {\n    if (!event.target.files || event.target.files.length === 0) {\n      setImageFile(undefined);\n      return;\n    }\n\n    setImageFile(event.target.files[0]);\n  };\n\n  return (\n    <Card sx={{ maxWidth: 500, margin: \"50px auto\" }}>\n      <CardHeader title=\"Add a new pet!\" sx={{ textAlign: \"center\" }} />\n      <CardMedia\n        component=\"img\"\n        height=\"300\"\n        image={preview}\n        alt=\"pet profile\"\n      />\n      <CardContent>\n        <Box\n          component=\"form\"\n          noValidate\n          onSubmit={handleFormSubmit}\n          sx={{ mt: 3 }}\n        >\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                name=\"pet_name\"\n                required\n                fullWidth\n                id=\"petName\"\n                label=\"Pet Name\"\n                autoFocus\n                value={formState.pet_name}\n                onChange={handleInputChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                required\n                fullWidth\n                id=\"species\"\n                label=\"Species\"\n                name=\"species\"\n                value={formState.species}\n                onChange={handleInputChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                required\n                fullWidth\n                id=\"birthday\"\n                label=\"Birthday\"\n                name=\"birthday\"\n                value={formState.birthday}\n                onChange={handleInputChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <Grid container direction=\"row\" alignItems=\"center\" wrap=\"nowrap\">\n                <Grid item xs={4}>\n                  <Button\n                    variant=\"contained\"\n                    component=\"label\"\n                    startIcon={<AddIcon />}\n                  >\n                    Add Image\n                    <input\n                      hidden\n                      accept=\"image/*\"\n                      multiple\n                      type=\"file\"\n                      onChange={onSelectFile}\n                    />\n                  </Button>\n                </Grid>\n                <Typography noWrap>No File Chosen</Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid container justifyContent=\"center\">\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2, backgroundColor: \"#405C96\", right: \"0\" }}\n            >\n              Save\n            </Button>\n          </Grid>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n}\n","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\queries.js",[],"C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Login\\index.js",[],"C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Login\\Login.js",["123","124"],"import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { LOGIN_USER } from \"../../utils/mutations\";\nimport {\n  Grid,\n  Box,\n  Avatar,\n  Typography,\n  TextField,\n  Button,\n  Link,\n  Paper,\n} from \"@mui/material\";\nimport PetsIcon from \"@mui/icons-material/Pets\";\n\nimport Auth from \"../../utils/auth.js\";\nimport Register from \"../Register\";\n\nfunction Login() {\n  const [formState, setFormState] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  const [Login, { error, data }] = useMutation(LOGIN_USER);\n\n  const handleInputChange = ({ target: { name, value } }) => {\n    setFormState({ ...formState, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await Login({\n        variables: { ...formState },\n      });\n\n      Auth.login(data.login.token);\n      console.log(Auth.getProfile());\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // Show sign up modal use state\n  const [open, setOpen] = React.useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  return (\n    <>\n      <Grid\n        item\n        xs={12}\n        sm={8}\n        md={5}\n        component={Paper}\n        elevation={6}\n        square\n        sx={{\n          backgroundColor: \"#F8F5F2\",\n        }}\n      >\n        <Box\n          sx={{\n            my: 8,\n            mx: 4,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            backgroundColor: \"#F8F5F2\",\n          }}\n        >\n          <Avatar sx={{ m: 1, bgcolor: \"#DE4567\" }}>\n            <PetsIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            LOG IN\n          </Typography>\n          <Box\n            component=\"form\"\n            noValidate\n            onSubmit={handleFormSubmit}\n            sx={{ mt: 1 }}\n          >\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Email Address\"\n              name=\"email\"\n              autoComplete=\"email\"\n              autoFocus\n              value={formState.email}\n              onChange={handleInputChange}\n            />\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n              value={formState.password}\n              onChange={handleInputChange}\n            />\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2, backgroundColor: \"#405C96\" }}\n            >\n              LOG IN\n            </Button>\n            <Grid container>\n              <Grid item>\n                <Link onClick={handleOpen} variant=\"body2\">\n                  {\"Don't have an account? Sign Up\"}\n                </Link>\n              </Grid>\n            </Grid>\n          </Box>\n        </Box>\n      </Grid>\n      <Register handleClose={handleClose} open={open} />\n    </>\n  );\n}\n\nexport default Login;\n","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Matches\\index.js",[],"C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Matches\\Match.js",["125","126"],"import { useQuery } from \"@apollo/client\";\nimport { QUERY_USER, QUERY_OWNER } from \"../../utils/queries\";\nimport { getDistance } from \"geolib\";\nimport auth from \"../../utils/auth.js\";\nimport Typography from \"@mui/material/Typography\";\nimport { useState } from \"react\";\n\nasync function findLatLon(city) {\n  let latLon = { lat: \"\", lon: \"\" };\n  const geoAPI = `https://api.openweathermap.org/geo/1.0/direct?q=${city}&appid=1560a07c19638ebfb003c32577cdfee1`;\n  let response = await fetch(geoAPI);\n  let data = await response.json();\n  latLon.lat = data[0].lat;\n  latLon.lon = data[0].lon;\n  return latLon;\n}\n\nasync function distanceCalc(userLocation, otherLocation) {\n  let location1 = userLocation.toLowerCase();\n  location1 = location1.replace(\" \", \"_\");\n  let location2 = otherLocation.toLowerCase();\n  location2 = location2.replace(\" \", \"_\");\n  const userLatLon = await findLatLon(location1);\n  const otherLatLon = await findLatLon(location2);\n  const userLat = userLatLon.lat;\n  const userLon = userLatLon.lon;\n  const otherLat = otherLatLon.lat;\n  const otherLon = otherLatLon.lon;\n  let distance = getDistance(\n    { latitude: userLat, longitude: userLon },\n    { latitude: otherLat, longitude: otherLon }\n  );\n  distance = distance / 1609;\n  const finalDistance = Math.round(distance);\n  return finalDistance;\n}\n\nfunction Match(props) {\n  const [distance, setDistance] = useState(0);\n  const { loading: ownerLoading, data: ownerData } = useQuery(QUERY_OWNER, {\n    variables: { ownerId: props.pet.owner },\n  });\n  const owner = ownerData?.owner || {};\n  const ownerLocation = owner.location;\n  const userLocation = props.userData.user.location;\n  function calculateDistance() {\n    distanceCalc(ownerLocation, userLocation).then((res) => {\n      setDistance(res);\n    });\n  }\n  return (\n    <>\n      {ownerLoading ? (\n        <div>Loading...</div>\n      ) : (\n        <>\n          {calculateDistance()}\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Owner: {owner.first_name} {owner.last_name}\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            {distance} Miles Away\n          </Typography>\n        </>\n      )}\n    </>\n  );\n}\n\n// findLatLon(\"fountain_valley\");\n\nexport default Match;\n","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\mutations.js",["127","128"],"import { gql, useMutation } from \"@apollo/client\";\n\nexport const REGISTER_USER = gql`\n  mutation register(\n    $first_name: String!\n    $last_name: String!\n    $email: String!\n    $password: String!\n    $location: String!\n  ) {\n    register(\n      first_name: $first_name\n      last_name: $last_name\n      email: $email\n      password: $password\n      location: $location\n    ) {\n      token\n      user {\n        _id\n        first_name\n        last_name\n        email\n        location\n      }\n    }\n  }\n`;\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        first_name\n        last_name\n        email\n      }\n    }\n  }\n`;\n\nconst LOGOUT_MUTATION = gql`\n  mutation LogoutMutation {\n    logout\n  }\n`;\n\nexport const ADD_PET = gql`\n  mutation addPet(\n    $name: String!\n    $species: String!\n    $birthday: Date!\n    $pictures: String!\n    $owner: ID\n  ) {\n    addPet(\n      name: $name\n      species: $species\n      birthday: $birthday\n      pictures: $pictures\n      owner: $owner\n    ) {\n      _id\n      name\n      species\n      birthday\n      pictures\n    }\n  }\n`;\n\nexport const CREATE_CHAT = gql`\n  mutation createChat($roomID: String) {\n    createChat (roomID: $roomID) {\n      roomID\n      messages {\n        sender\n        message\n      }\n    }\n  }\n`;\n\nexport const ADD_MESSAGE = gql`\n  mutation addMessage($roomID: String, $message: MessageInput) {\n    addMessage (roomID: $roomID, message: $message) {\n      roomID\n      messages {\n        sender\n        message\n      }\n    }\n  }\n`;\n\nexport function useLogoutMutation() {\n  const [logout, { data, loading, error }] = useMutation(LOGOUT_MUTATION);\n\n  return { logout, data, loading, error };\n}\n\n// uploading photo mutation\n\nconst QUERY_UPLOAD_PHOTO = `\n\tmutation ($formData: FormData!) {\n\t\tuploadProfilePicture(formData: $formData) {\n\t\t\tsuccess\n\t\t}\n\t}\n`;\n\nconst formData = new FormData();\n\n// async function sendMutation() {\n// \tconst response = await fetch(\"/graphql\", {\n// \t\tmethod: \"POST\",\n// \t\theaders: {\n// \t\t\t\"Content-Type\": \"application/json\",\n// \t\t},\n// \t\tbody: JSON.stringify({\n// \t\t\tquery: QUERY_UPLOAD_PHOTO,\n// \t\t\tvariables: {\n// \t\t\t\tformData,\n// \t\t\t},\n// \t\t}),\n// \t});\n// \tconsole.log(response);\n// }\n// sendMutation();\n","C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Register\\index.js",[],"C:\\Users\\sarym\\Desktop\\Bootcamp\\Project-3\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Register\\Register.js",["129","130"],"import * as React from 'react';\nimport { useState } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { REGISTER_USER } from \"../../utils/mutations\";\nimport { Modal, Box, Typography, Grid, TextField, Button } from \"@mui/material\";\n\nimport Auth from \"../../utils/auth.js\";\n\nfunction Register(props) {\n  const [formState, setFormState] = useState({\n    first_name: \"\",\n    last_name: \"\",\n    location: \"\",\n    email: \"\",\n    password: \"\",\n  });\n\n  const [register, { error, data }] = useMutation(REGISTER_USER);\n\n  const handleInputChange = ({ target: { name, value } }) => {\n    setFormState({ ...formState, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await register({\n        variables: { ...formState },\n      });\n      console.log(data);\n      Auth.login(data.register.token);\n      window.location('/Feed')\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    // Sign up modal\n    <Modal\n      open={props.open}\n      onClose={props.handleClose}\n      aria-labelledby=\"modal-modal-title\"\n      aria-describedby=\"modal-modal-description\"\n    >\n      <Box sx={{\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        width: 400,\n        bgcolor: 'background.paper',\n        boxShadow: 24,\n        p: 4,\n        \"@media (max-width: 600px)\": {\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          width: '70%',\n          bgcolor: 'background.paper',\n          boxShadow: 24,\n          p: 4,\n        }\n      }}>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign up\n        </Typography>\n        <Box component=\"form\" noValidate onSubmit={handleFormSubmit} sx={{ mt: 3 }}>\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                autoComplete=\"given-name\"\n                name=\"first_name\"\n                required\n                fullWidth\n                id=\"firstName\"\n                label=\"First Name\"\n                autoFocus\n                value={formState.first_name}\n                onChange={handleInputChange}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                required\n                fullWidth\n                id=\"lastName\"\n                label=\"Last Name\"\n                name=\"last_name\"\n                autoComplete=\"family-name\"\n                value={formState.last_name}\n                onChange={handleInputChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                required\n                fullWidth\n                id=\"location\"\n                label=\"Location\"\n                name=\"location\"\n                autoComplete=\"location\"\n                value={formState.location}\n                onChange={handleInputChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                autoComplete=\"email\"\n                value={formState.email}\n                onChange={handleInputChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"new-password\"\n                value={formState.password}\n                onChange={handleInputChange}\n              />\n            </Grid>\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            sx={{ mt: 3, mb: 2, backgroundColor: '#405C96' }}\n          >\n            Sign Up\n          </Button>\n        </Box>\n      </Box>\n    </Modal>\n  );\n}\n\nexport default Register;\n",{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","severity":1,"message":"136","line":84,"column":22,"nodeType":"137","messageId":"138","endLine":84,"endColumn":37},{"ruleId":"135","severity":1,"message":"139","line":88,"column":22,"nodeType":"137","messageId":"138","endLine":88,"endColumn":36},{"ruleId":"140","severity":1,"message":"141","line":133,"column":8,"nodeType":"142","endLine":133,"endColumn":16,"suggestions":"143"},{"ruleId":"144","severity":1,"message":"145","line":28,"column":1,"nodeType":"146","endLine":28,"endColumn":34},{"ruleId":"135","severity":1,"message":"147","line":7,"column":10,"nodeType":"137","messageId":"138","endLine":7,"endColumn":22},{"ruleId":"135","severity":1,"message":"148","line":8,"column":10,"nodeType":"137","messageId":"138","endLine":8,"endColumn":18},{"ruleId":"135","severity":1,"message":"149","line":1,"column":17,"nodeType":"137","messageId":"138","endLine":1,"endColumn":25},{"ruleId":"135","severity":1,"message":"150","line":1,"column":27,"nodeType":"137","messageId":"138","endLine":1,"endColumn":36},{"ruleId":"135","severity":1,"message":"151","line":2,"column":10,"nodeType":"137","messageId":"138","endLine":2,"endColumn":21},{"ruleId":"135","severity":1,"message":"152","line":7,"column":7,"nodeType":"137","messageId":"138","endLine":7,"endColumn":13},{"ruleId":"135","severity":1,"message":"153","line":6,"column":34,"nodeType":"137","messageId":"138","endLine":6,"endColumn":45},{"ruleId":"135","severity":1,"message":"149","line":8,"column":10,"nodeType":"137","messageId":"138","endLine":8,"endColumn":18},{"ruleId":"135","severity":1,"message":"150","line":8,"column":20,"nodeType":"137","messageId":"138","endLine":8,"endColumn":29},{"ruleId":"135","severity":1,"message":"154","line":62,"column":13,"nodeType":"137","messageId":"138","endLine":62,"endColumn":20},{"ruleId":"135","severity":1,"message":"155","line":17,"column":8,"nodeType":"137","messageId":"138","endLine":17,"endColumn":12},{"ruleId":"135","severity":1,"message":"156","line":39,"column":13,"nodeType":"137","messageId":"138","endLine":39,"endColumn":23},{"ruleId":"135","severity":1,"message":"157","line":26,"column":19,"nodeType":"137","messageId":"138","endLine":26,"endColumn":24},{"ruleId":"135","severity":1,"message":"158","line":26,"column":26,"nodeType":"137","messageId":"138","endLine":26,"endColumn":30},{"ruleId":"135","severity":1,"message":"159","line":2,"column":10,"nodeType":"137","messageId":"138","endLine":2,"endColumn":20},{"ruleId":"135","severity":1,"message":"155","line":4,"column":8,"nodeType":"137","messageId":"138","endLine":4,"endColumn":12},{"ruleId":"135","severity":1,"message":"160","line":106,"column":7,"nodeType":"137","messageId":"138","endLine":106,"endColumn":25},{"ruleId":"135","severity":1,"message":"161","line":114,"column":7,"nodeType":"137","messageId":"138","endLine":114,"endColumn":15},{"ruleId":"135","severity":1,"message":"157","line":18,"column":22,"nodeType":"137","messageId":"138","endLine":18,"endColumn":27},{"ruleId":"135","severity":1,"message":"158","line":18,"column":29,"nodeType":"137","messageId":"138","endLine":18,"endColumn":33},"no-native-reassign",["162"],"no-negated-in-lhs",["163"],"no-unused-vars","'userChatLoading' is assigned a value but never used.","Identifier","unusedVar","'friendsLoading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has an unnecessary dependency: 'socket'. Either exclude it or remove the dependency array. Outer scope values like 'socket' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["164"],"import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration","'QUERY_MYPETS' is defined but never used.","'useQuery' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'useMutation' is defined but never used.","'LOGOUT' is assigned a value but never used.","'QUERY_OWNER' is defined but never used.","'addChat' is assigned a value but never used.","'auth' is defined but never used.","'addPetForm' is assigned a value but never used.","'error' is assigned a value but never used.","'data' is assigned a value but never used.","'QUERY_USER' is defined but never used.","'QUERY_UPLOAD_PHOTO' is assigned a value but never used.","'formData' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"165","fix":"166"},"Update the dependencies array to be: []",{"range":"167","text":"168"},[4053,4061],"[]"]
>>>>>>> 401fe1a24197a262d8c1d10c0c015a1eea0a1f2c
=======
[{"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\index.js":"1","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\App.js":"2","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\components\\Navbar.js":"3","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\components\\ChatBox.js":"4","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\auth.js":"5","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Logout\\index.js":"6","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Home\\index.js":"7","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Profile\\index.js":"8","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Feed\\index.js":"9","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Logout\\Logout.js":"10","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Home\\Home.js":"11","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Profile\\Profile.js":"12","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Feed\\Feed.js":"13","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Login\\index.js":"14","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Login\\Login.js":"15","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\mutations.js":"16","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Register\\index.js":"17","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Register\\Register.js":"18","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\AddPet\\index.js":"19","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\AddPet\\AddPet.js":"20","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\queries.js":"21","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Matches\\index.js":"22","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Matches\\Match.js":"23","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\components\\UploadWidget.js":"24","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\components\\ImageUpload.js":"25","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\CloudinaryService.js":"26"},{"size":225,"mtime":1675658069343,"results":"27","hashOfConfig":"28"},{"size":1334,"mtime":1675658069340,"results":"29","hashOfConfig":"28"},{"size":4213,"mtime":1675658069342,"results":"30","hashOfConfig":"28"},{"size":19492,"mtime":1675658069341,"results":"31","hashOfConfig":"28"},{"size":505,"mtime":1675658069348,"results":"32","hashOfConfig":"28"},{"size":40,"mtime":1675194465515,"results":"33","hashOfConfig":"28"},{"size":38,"mtime":1675194465514,"results":"34","hashOfConfig":"28"},{"size":45,"mtime":1675194465517,"results":"35","hashOfConfig":"28"},{"size":32,"mtime":1675280581851,"results":"36","hashOfConfig":"28"},{"size":1032,"mtime":1675658069346,"results":"37","hashOfConfig":"28"},{"size":808,"mtime":1675658069345,"results":"38","hashOfConfig":"28"},{"size":3552,"mtime":1675665000010,"results":"39","hashOfConfig":"28"},{"size":3124,"mtime":1675658069344,"results":"40","hashOfConfig":"28"},{"size":39,"mtime":1675194465515,"results":"41","hashOfConfig":"28"},{"size":3395,"mtime":1675658069345,"results":"42","hashOfConfig":"28"},{"size":1900,"mtime":1675658069349,"results":"43","hashOfConfig":"28"},{"size":42,"mtime":1675194465518,"results":"44","hashOfConfig":"28"},{"size":3632,"mtime":1675658069347,"results":"45","hashOfConfig":"28"},{"size":34,"mtime":1675367404476,"results":"46","hashOfConfig":"28"},{"size":3503,"mtime":1675658069344,"results":"47","hashOfConfig":"28"},{"size":1335,"mtime":1675658069349,"results":"48","hashOfConfig":"28"},{"size":39,"mtime":1675194465516,"results":"49","hashOfConfig":"28"},{"size":2370,"mtime":1675658069346,"results":"50","hashOfConfig":"28"},{"size":1011,"mtime":1675658069342,"results":"51","hashOfConfig":"28"},{"size":701,"mtime":1675658069341,"results":"52","hashOfConfig":"28"},{"size":444,"mtime":1675658069348,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"16qcfwd",{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"56"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\index.js",[],["117","118"],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\App.js",[],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\components\\Navbar.js",[],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\components\\ChatBox.js",["119","120","121"],"import * as React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ForumIcon from \"@mui/icons-material/Forum\";\r\nimport SendIcon from \"@mui/icons-material/Send\";\r\nimport {\r\n    Modal,\r\n    Typography,\r\n    Box,\r\n    Grid,\r\n    TextField,\r\n    Backdrop,\r\n    Button,\r\n    Tabs,\r\n    Tab,\r\n} from \"@mui/material\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { QUERY_USER_CHATS, QUERY_FRIENDS_LIST } from \"../utils/queries\";\r\n\r\nimport auth from \"../utils/auth\";\r\n\r\nimport io from \"socket.io-client\";\r\nconst socket = io.connect(\"http://localhost:3001\");\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}\r\n            style={{ height: \"92%\" }}\r\n        >\r\n            {value === index && (\r\n                <Box sx={{ height: \"100%\" }}>\r\n                    <Box sx={{ height: \"100%\" }}>{children}</Box>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.number.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `simple-tab-${index}`,\r\n        \"aria-controls\": `simple-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nfunction ChatBox() {\r\n    // Show chat box modal use state\r\n    const [open, setOpen] = React.useState(false);\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => setOpen(false);\r\n\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const userMessageStyle = {\r\n        color: \"white\",\r\n        lineHeight: \"1.5\",\r\n        backgroundColor: \"primary.main\",\r\n        m: \"10px 10px 20px 10px\",\r\n        p: \"5px 20px\",\r\n        borderRadius: \"16px 16px 0 16px\",\r\n        maxWidth: \"40%\",\r\n        overflowWrap: \"break-word\",\r\n    };\r\n\r\n    const friendMessageStyle = {\r\n        color: \"black\",\r\n        lineHeight: \"1.5\",\r\n        backgroundColor: \"grey.400\",\r\n        m: \"10px 10px 20px 10px\",\r\n        p: \"5px 20px\",\r\n        borderRadius: \"16px 16px 16px 0px\",\r\n        maxWidth: \"40%\",\r\n        overflowWrap: \"break-word\",\r\n    };\r\n\r\n    // Getting array of user's chats\r\n    const { loading: userChatLoading, data: userChats } =\r\n        useQuery(QUERY_USER_CHATS);\r\n    const myId = userChats?.getUserChats._id || {};\r\n\r\n    // Getting array of friends object ID\r\n    const { loading: friendsLoading, data: userFriends } = useQuery(\r\n        QUERY_FRIENDS_LIST,\r\n        {\r\n            variables: { ownerId: myId },\r\n        }\r\n    );\r\n    const userFriendsData = userFriends?.owner || {};\r\n    const userFriendsList = userFriendsData.friends || [];\r\n\r\n    // Socket.io stuff\r\n    const [message, setMessage] = React.useState(\"\");\r\n    const [messageReceived, setMessageReceived] = React.useState([]);\r\n    const [room, setRoom] = React.useState(\"\");\r\n    const [chatAnnounce, setChatAnnounce] = React.useState(\"\");\r\n    const [chatStyle, setChatStyle] = React.useState(\"\");\r\n\r\n    const ChatBubblesRef = React.useRef(null);\r\n\r\n    // Logic to create chatroom ID\r\n    const createChatRoomID = (event) => {\r\n        const IdArr = [];\r\n        IdArr.push(event.target.firstElementChild.id);\r\n        IdArr.push(myId);\r\n        IdArr.sort();\r\n        const roomID = IdArr.toString();\r\n\r\n        setChatAnnounce(`You're in a chat with ${event.target.id}`);\r\n        setRoom(roomID);\r\n        setChatStyle(event.target.firstElementChild.id);\r\n        setValue(1);\r\n\r\n        socket.emit(\"joinRoom\", roomID);\r\n    };\r\n\r\n    const sendMessage = () => {\r\n        if (message === \"\") {\r\n            return;\r\n        } else if (room === \"\") {\r\n            console.log(\"You're not in a room!\");\r\n            return;\r\n        }\r\n        socket.emit(\"sendMessage\", { message, myId, room });\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        socket.on(\"receiveMessage\", (data) => {\r\n            setMessageReceived(data);\r\n            setMessage(\"\");\r\n        });\r\n    }, [socket]);\r\n\r\n    React.useEffect(() => {\r\n        ChatBubblesRef.current?.scrollIntoView();\r\n    }, [messageReceived]);\r\n\r\n    // React components to map\r\n    function DisplayChats(props) {\r\n        return (\r\n            <>\r\n                <Box\r\n                    sx={{\r\n                        height: \"2px\",\r\n                        marginBottom: \"5px\",\r\n                        backgroundColor: \"#E4E4E4\",\r\n                    }}\r\n                ></Box>\r\n                <Button\r\n                    variant={chatStyle === props.friendID ? \"contained\" : \"text\"}\r\n                    sx={{ width: \"100%\", marginBottom: \"5px\" }}\r\n                    onClick={createChatRoomID}\r\n                    id={props.fullName}\r\n                >\r\n                    <input hidden={true} id={props.friendID} />\r\n                    {props.fullName}\r\n                </Button>\r\n            </>\r\n        );\r\n    }\r\n\r\n    function ChatBubble(props) {\r\n        const timeStamp = new Date(props.timeStamp);\r\n        const timeSetting = {\r\n            month: \"2-digit\",\r\n            day: \"2-digit\",\r\n            year: \"2-digit\",\r\n            hour: \"2-digit\",\r\n            minute: \"2-digit\",\r\n        };\r\n        const newTimeStamp = timeStamp\r\n            .toLocaleDateString(\"en-US\", timeSetting)\r\n            .split(\",\")\r\n            .join(\"\");\r\n\r\n        return (\r\n            <>\r\n                <Box\r\n                    textAlign={props.sender === myId ? \"right\" : \"left\"}\r\n                    fontSize=\"14px\"\r\n                    color=\"grey.400\"\r\n                >\r\n                    {newTimeStamp}\r\n                </Box>\r\n                <Grid\r\n                    container\r\n                    justifyContent={props.sender === myId ? \"flex-end\" : \"flex-start\"}\r\n                >\r\n                    <Typography\r\n                        variant=\"h6\"\r\n                        component=\"div\"\r\n                        sx={props.sender === myId ? userMessageStyle : friendMessageStyle}\r\n                    >\r\n                        {props.message}\r\n                    </Typography>\r\n                </Grid>\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {auth.loggedIn() ? (\r\n                <ForumIcon\r\n                    sx={{\r\n                        position: \"fixed\",\r\n                        zIndex: 50,\r\n                        right: \"3%\",\r\n                        bottom: \"3%\",\r\n                        width: 40,\r\n                        height: 40,\r\n                        \"&:hover\": {\r\n                            cursor: \"pointer\",\r\n                        },\r\n                    }}\r\n                    onClick={handleOpen}\r\n                />\r\n            ) : (\r\n                <></>\r\n            )}\r\n            <Backdrop sx={{ color: \"#fff\", zIndex: 10 }} open={open}>\r\n                <Modal\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    aria-labelledby=\"modal-modal-title\"\r\n                    aria-describedby=\"modal-modal-description\"\r\n                    sx={{ height: \"100vh\" }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            position: \"absolute\",\r\n                            top: \"50%\",\r\n                            left: \"50%\",\r\n                            transform: \"translate(-50%, -50%)\",\r\n                            width: \"70%\",\r\n                            height: \"70%\",\r\n                            bgcolor: \"background.paper\",\r\n                            boxShadow: 24,\r\n                            p: 2,\r\n                            borderRadius: 5,\r\n                        }}\r\n                    >\r\n                        {/* Medium screen breakpoint chat layout */}\r\n                        <Grid\r\n                            container\r\n                            sx={{ height: \"100%\", display: { xs: \"none\", md: \"flex\" } }}\r\n                        >\r\n                            <Grid\r\n                                item\r\n                                sm={3}\r\n                                sx={{\r\n                                    borderRight: \"2px solid #E4E4E4\",\r\n                                    p: \"0 16px 0 0\",\r\n                                }}\r\n                            >\r\n                                <Typography\r\n                                    variant=\"h6\"\r\n                                    component=\"h2\"\r\n                                    sx={{ textAlign: \"center\", marginBottom: \"20px\" }}\r\n                                >\r\n                                    Chats\r\n                                </Typography>\r\n                                <Box overflow=\"auto\">\r\n                                    {userFriendsList.map((friend) => (\r\n                                        <DisplayChats\r\n                                            key={friend._id}\r\n                                            fullName={`${friend.first_name} ${friend.last_name}`}\r\n                                            friendID={friend._id}\r\n                                        />\r\n                                    ))}\r\n                                </Box>\r\n                            </Grid>\r\n                            <Grid\r\n                                item\r\n                                sm={9}\r\n                                sx={{\r\n                                    p: \"0 0 0 16px\",\r\n                                    height: \"100%\",\r\n                                }}\r\n                            >\r\n                                <Grid\r\n                                    container\r\n                                    direction=\"column\"\r\n                                    justifyContent=\"flex-end\"\r\n                                    sx={{ height: \"100%\", flexWrap: \"nowrap\" }}\r\n                                >\r\n                                    <Grid item>\r\n                                        <Typography>{chatAnnounce}</Typography>\r\n                                    </Grid>\r\n                                    <Grid item sx={{ overflow: \"auto\" }}>\r\n                                        {messageReceived.map((data) => (\r\n                                            <ChatBubble\r\n                                                key={data._id}\r\n                                                sender={data.sender}\r\n                                                message={data.message}\r\n                                                timeStamp={data.createdAt}\r\n                                            />\r\n                                        ))}\r\n                                        <div ref={ChatBubblesRef} />\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Box\r\n                                            component=\"form\"\r\n                                            onSubmit={(event) => {\r\n                                                event.preventDefault();\r\n                                                sendMessage();\r\n                                            }}\r\n                                        >\r\n                                            <Grid container justifyContent=\"center\" gap={1}>\r\n                                                <Grid item xs>\r\n                                                    <TextField\r\n                                                        fullWidth\r\n                                                        size=\"small\"\r\n                                                        placeholder=\"Your message here...\"\r\n                                                        id=\"textfield\"\r\n                                                        value={message}\r\n                                                        onChange={(event) => {\r\n                                                            setMessage(event.target.value);\r\n                                                        }}\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid item xs={2}>\r\n                                                    <Grid\r\n                                                        container\r\n                                                        justifyContent=\"center\"\r\n                                                        alignItems=\"center\"\r\n                                                        sx={{ height: 1 }}\r\n                                                    >\r\n                                                        <Button\r\n                                                            variant=\"contained\"\r\n                                                            endIcon={<SendIcon />}\r\n                                                            type=\"submit\"\r\n                                                        >\r\n                                                            Send\r\n                                                        </Button>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Box>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        {/* Small screen breakpoint chat layout */}\r\n                        <Grid\r\n                            container\r\n                            sx={{ height: \"100%\", display: { xs: \"flex\", md: \"none\" } }}\r\n                        >\r\n                            <Grid\r\n                                container\r\n                                direction=\"column\"\r\n                                flexWrap=\"nowrap\"\r\n                                sx={{ height: \"100%\" }}\r\n                            >\r\n                                <Grid\r\n                                    item\r\n                                    xs={1}\r\n                                    sx={{ borderBottom: 1, borderColor: \"divider\" }}\r\n                                >\r\n                                    <Tabs value={value} onChange={handleChange} centered>\r\n                                        <Tab label=\"Chats\" {...a11yProps(0)} />\r\n                                        <Tab label=\"Message\" {...a11yProps(1)} />\r\n                                    </Tabs>\r\n                                </Grid>\r\n                                <TabPanel value={value} index={0}>\r\n                                    {userFriendsList.map((friend) => (\r\n                                        <DisplayChats\r\n                                            key={friend._id}\r\n                                            fullName={`${friend.first_name} ${friend.last_name}`}\r\n                                            friendID={friend._id}\r\n                                        />\r\n                                    ))}\r\n                                </TabPanel>\r\n                                <TabPanel value={value} index={1}>\r\n                                    <Grid\r\n                                        container\r\n                                        direction=\"column\"\r\n                                        justifyContent=\"flex-end\"\r\n                                        flexWrap=\"nowrap\"\r\n                                        height=\"100%\"\r\n                                    >\r\n                                        <Grid item>\r\n                                            <Typography>{chatAnnounce}</Typography>\r\n                                        </Grid>\r\n                                        <Grid item sx={{ overflow: \"auto\" }} id=\"messageField\">\r\n                                            {messageReceived.map((data) => (\r\n                                                <ChatBubble\r\n                                                    key={data._id}\r\n                                                    sender={data.sender}\r\n                                                    message={data.message}\r\n                                                    timeStamp={data.createdAt}\r\n                                                />\r\n                                            ))}\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Box\r\n                                                component=\"form\"\r\n                                                onSubmit={(event) => {\r\n                                                    event.preventDefault();\r\n                                                    sendMessage();\r\n                                                }}\r\n                                            >\r\n                                                <Grid container justifyContent=\"center\">\r\n                                                    <Grid item xs>\r\n                                                        <TextField\r\n                                                            fullWidth\r\n                                                            size=\"small\"\r\n                                                            placeholder=\"Your message here...\"\r\n                                                            id=\"textfield\"\r\n                                                            value={message}\r\n                                                            onChange={(event) => {\r\n                                                                setMessage(event.target.value);\r\n                                                            }}\r\n                                                        />\r\n                                                    </Grid>\r\n                                                    <Grid item>\r\n                                                        <Grid\r\n                                                            container\r\n                                                            justifyContent=\"center\"\r\n                                                            alignItems=\"center\"\r\n                                                            sx={{ height: 1 }}\r\n                                                        >\r\n                                                            <Button variant=\"contained\" type=\"submit\">\r\n                                                                <SendIcon />\r\n                                                            </Button>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </Box>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </TabPanel>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </Modal>\r\n            </Backdrop>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ChatBox;\r\n","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\auth.js",["122"],"import decode from \"jwt-decode\";\r\n\r\nclass AuthService {\r\n\tgetProfile() {\r\n\t\treturn decode(this.getToken());\r\n\t}\r\n\r\n\tloggedIn() {\r\n\t\tconst token = this.getToken();\r\n\t\treturn token ? true : false;\r\n\t}\r\n\r\n\tgetToken() {\r\n\t\treturn localStorage.getItem(\"auth_token\");\r\n\t}\r\n\r\n\tlogin(token) {\r\n\t\tlocalStorage.setItem(\"auth_token\", token);\r\n\t\twindow.location.assign(\"/feed\");\r\n\t}\r\n\r\n\tlogout() {\r\n\t\tlocalStorage.removeItem(\"auth_token\");\r\n\t\twindow.location.assign(\"/\");\r\n\t}\r\n}\r\n\r\nexport default new AuthService();\r\n","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Logout\\index.js",[],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Home\\index.js",[],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Profile\\index.js",[],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Feed\\index.js",[],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Logout\\Logout.js",["123","124","125","126"],"import React, { useState, useEffect } from \"react\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport gql from \"graphql-tag\";\r\nimport { Button } from \"@mui/material\";\r\nimport auth from \"../../utils/auth.js\";\r\n\r\nconst LOGOUT = gql`\r\n\tmutation Logout {\r\n\t\tlogout\r\n\t}\r\n`;\r\n\r\nfunction LogoutForm() {\r\n\t// const [logout, { data }] = useMutation(LOGOUT);\r\n\t// const [isLoggedOut, setIsLoggedOut] = useState(false);\r\n\r\n\t// useEffect(() => {\r\n\t//   if (data) {\r\n\t//     auth.logout();\r\n\t//     setIsLoggedOut(true);\r\n\t//   }\r\n\t// }, [data]);\r\n\r\n\tconst handleSubmit = async (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tawait auth.logout();\r\n\t};\r\n\r\n\t// if (isLoggedOut) {\r\n\t//   return <p>You have successfully logged out.</p>;\r\n\t// }\r\n\r\n\treturn (\r\n\t\t<Button\r\n\t\t\tonClick={handleSubmit}\r\n\t\t\tvariant='outlined'\r\n\t\t\tsx={{\r\n\t\t\t\tcolor: \"white\",\r\n\t\t\t\tborderColor: \"white\",\r\n\t\t\t\tml: \"20px\",\r\n\t\t\t\t\"&:hover\": {\r\n\t\t\t\t\tcolor: \"#DE4567\",\r\n\t\t\t\t\tborderColor: \"#DE4567\",\r\n\t\t\t\t},\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\tLogout\r\n\t\t</Button>\r\n\t);\r\n}\r\n\r\nexport default LogoutForm;\r\n","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Home\\Home.js",[],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Profile\\Profile.js",["127","128","129","130","131"],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Feed\\Feed.js",["132","133","134","135"],"import * as React from \"react\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  CardMedia,\r\n  CardContent,\r\n  CardActions,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport ChatIcon from \"@mui/icons-material/Chat\";\r\nimport Match from \"../Matches\";\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport { QUERY_PETS, QUERY_USER, QUERY_OWNER } from \"../../utils/queries.js\";\r\nimport { CREATE_CHAT } from \"../../utils/mutations\";\r\nimport { useState, useEffect } from \"react\";\r\nimport dayjs from \"dayjs\";\r\n\r\nexport default function RecipeReviewCard() {\r\n  const { loading: petsLoading, data: petsData } = useQuery(QUERY_PETS);\r\n  let petList = petsData?.pets || [];\r\n  console.log(\"-----petList: \", petList)\r\n\r\n  const now = dayjs().format(\"YYYY-MM-DD\");\r\n  const { loading: userLoading, data: userData } = useQuery(QUERY_USER);\r\n\r\n\tconst [createChat] = useMutation(CREATE_CHAT);\r\n\r\n  // Creating roomID using pet's owner and user ID\r\n  const addToChat = async (event) => {\r\n    if (!petsLoading && !userLoading) {\r\n      const IdArr = [];\r\n      IdArr.push(event.target.firstElementChild.id);\r\n      IdArr.push(userData.user._id);\r\n      IdArr.sort();\r\n      const roomID = IdArr.toString();\r\n\r\n      const addChat = await createChat({\r\n        variables: { roomID: roomID },\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      justifyContent=\"center\"\r\n      gap={4}\r\n      sx={{ marginTop: \"20px\", padding: \"0 20px\" }}\r\n    >\r\n      {petsLoading || userLoading ? (\r\n        <div>Loading...</div>\r\n      ) : (\r\n        <>\r\n          {petList.map((pet) => {\r\n            return (\r\n              <Grid item xs={12} sm={6} md={3} key={pet._id}>\r\n                <Card sx={{ maxWidth: 345 }}>\r\n                  <CardHeader title={pet.name} />\r\n                  <CardMedia\r\n                    component=\"img\"\r\n                    height=\"194\"\r\n                    image={pet.picturesURL}\r\n                    alt=\"pet profile picture\"\r\n                  />\r\n                  <CardContent>\r\n                    <Match pet={pet} userData={userData} />\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Age: {dayjs(now).diff(dayjs(pet.birthday), \"year\")}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Species: {pet.species}\r\n                    </Typography>\r\n                  </CardContent>\r\n                  <CardActions\r\n                    disableSpacing\r\n                    sx={{ display: \"flex\", justifyContent: \"flex-end\" }}\r\n                  >\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      endIcon={<ChatIcon />}\r\n                      onClick={addToChat}\r\n                    >\r\n                      ADD {`${pet.owner.first_name}`} TO CHAT\r\n                      <input hidden={true} id={pet.owner}></input>\r\n                    </Button>\r\n                  </CardActions>\r\n                </Card>\r\n              </Grid>\r\n            );\r\n          })}\r\n        </>\r\n      )}\r\n    </Grid>\r\n  );\r\n}\r\n","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Login\\index.js",[],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Login\\Login.js",["136","137"],"import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { LOGIN_USER } from \"../../utils/mutations\";\r\nimport {\r\n  Grid,\r\n  Box,\r\n  Avatar,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Link,\r\n  Paper,\r\n} from \"@mui/material\";\r\nimport PetsIcon from \"@mui/icons-material/Pets\";\r\n\r\nimport Auth from \"../../utils/auth.js\";\r\nimport Register from \"../Register\";\r\n\r\nfunction Login() {\r\n  const [formState, setFormState] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const [Login, { error, data }] = useMutation(LOGIN_USER);\r\n\r\n  const handleInputChange = ({ target: { name, value } }) => {\r\n    setFormState({ ...formState, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      const { data } = await Login({\r\n        variables: { ...formState },\r\n      });\r\n      Auth.login(data.login.token);\r\n      console.log(Auth.getProfile());\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // Show sign up modal use state\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        sm={8}\r\n        md={5}\r\n        component={Paper}\r\n        elevation={6}\r\n        square\r\n        sx={{\r\n          backgroundColor: \"#F8F5F2\",\r\n        }}\r\n      >\r\n        <Box\r\n          sx={{\r\n            my: 8,\r\n            mx: 4,\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n            backgroundColor: \"#F8F5F2\",\r\n          }}\r\n        >\r\n          <Avatar sx={{ m: 1, bgcolor: \"#DE4567\" }}>\r\n            <PetsIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            LOG IN\r\n          </Typography>\r\n          <Box\r\n            component=\"form\"\r\n            noValidate\r\n            onSubmit={handleFormSubmit}\r\n            sx={{ mt: 1 }}\r\n          >\r\n            <TextField\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"email\"\r\n              label=\"Email Address\"\r\n              name=\"email\"\r\n              autoComplete=\"email\"\r\n              autoFocus\r\n              value={formState.email}\r\n              onChange={handleInputChange}\r\n            />\r\n            <TextField\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n              value={formState.password}\r\n              onChange={handleInputChange}\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2, backgroundColor: \"#405C96\" }}\r\n            >\r\n              LOG IN\r\n            </Button>\r\n            <Grid container>\r\n              <Grid item>\r\n                <Link onClick={handleOpen} variant=\"body2\">\r\n                  {\"Don't have an account? Sign Up\"}\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n      </Grid>\r\n      <Register handleClose={handleClose} open={open} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\mutations.js",["138","139"],"import { gql, useMutation } from \"@apollo/client\";\r\n\r\nexport const REGISTER_USER = gql`\r\n\tmutation register(\r\n\t\t$first_name: String!\r\n\t\t$last_name: String!\r\n\t\t$email: String!\r\n\t\t$password: String!\r\n\t\t$location: String!\r\n\t) {\r\n\t\tregister(\r\n\t\t\tfirst_name: $first_name\r\n\t\t\tlast_name: $last_name\r\n\t\t\temail: $email\r\n\t\t\tpassword: $password\r\n\t\t\tlocation: $location\r\n\t\t) {\r\n\t\t\ttoken\r\n\t\t\tuser {\r\n\t\t\t\t_id\r\n\t\t\t\tfirst_name\r\n\t\t\t\tlast_name\r\n\t\t\t\temail\r\n\t\t\t\tlocation\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nexport const LOGIN_USER = gql`\r\n\tmutation login($email: String!, $password: String!) {\r\n\t\tlogin(email: $email, password: $password) {\r\n\t\t\ttoken\r\n\t\t\tuser {\r\n\t\t\t\t_id\r\n\t\t\t\tfirst_name\r\n\t\t\t\tlast_name\r\n\t\t\t\temail\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst LOGOUT_MUTATION = gql`\r\n\tmutation LogoutMutation {\r\n\t\tlogout\r\n\t}\r\n`;\r\n\r\nexport const ADD_PET = gql`\r\n\tmutation addPet(\r\n\t\t$name: String!\r\n\t\t$species: String!\r\n\t\t$birthday: Date!\r\n\t\t$picturesURL: String!\r\n\t\t$owner: ID\r\n\t) {\r\n\t\taddPet(\r\n\t\t\tname: $name\r\n\t\t\tspecies: $species\r\n\t\t\tbirthday: $birthday\r\n\t\t\tpicturesURL: $picturesURL\r\n\t\t\towner: $owner\r\n\t\t) {\r\n\t\t\t_id\r\n\t\t\tname\r\n\t\t\tspecies\r\n\t\t\tbirthday\r\n\t\t\tpicturesURL\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nexport const CREATE_CHAT = gql`\r\n\tmutation createChat($roomID: String) {\r\n\t\tcreateChat(roomID: $roomID) {\r\n\t\t\troomID\r\n\t\t\tmessages {\r\n\t\t\t\tsender\r\n\t\t\t\tmessage\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nexport const ADD_MESSAGE = gql`\r\n\tmutation addMessage($roomID: String, $message: MessageInput) {\r\n\t\taddMessage(roomID: $roomID, message: $message) {\r\n\t\t\troomID\r\n\t\t\tmessages {\r\n\t\t\t\tsender\r\n\t\t\t\tmessage\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nexport function useLogoutMutation() {\r\n\tconst [logout, { data, loading, error }] = useMutation(LOGOUT_MUTATION);\r\n\r\n\treturn { logout, data, loading, error };\r\n}\r\n\r\n// uploading photo mutation\r\n\r\nconst QUERY_UPLOAD_PHOTO = `\r\n\tmutation ($formData: FormData!) {\r\n\t\tuploadProfilePicture(formData: $formData) {\r\n\t\t\tsuccess\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst formData = new FormData();","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Register\\index.js",[],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Register\\Register.js",["140","141"],"import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { REGISTER_USER } from \"../../utils/mutations\";\r\nimport { Modal, Box, Typography, Grid, TextField, Button } from \"@mui/material\";\r\n\r\nimport Auth from \"../../utils/auth.js\";\r\n\r\nfunction Register(props) {\r\n\tconst [formState, setFormState] = useState({\r\n\t\tfirst_name: \"\",\r\n\t\tlast_name: \"\",\r\n\t\tlocation: \"\",\r\n\t\temail: \"\",\r\n\t\tpassword: \"\",\r\n\t});\r\n\r\n\tconst [register, { error, data }] = useMutation(REGISTER_USER);\r\n\r\n\tconst handleInputChange = ({ target: { name, value } }) => {\r\n\t\tsetFormState({ ...formState, [name]: value });\r\n\t};\r\n\r\n\tconst handleFormSubmit = async (event) => {\r\n\t\tevent.preventDefault();\r\n\r\n\t\ttry {\r\n\t\t\tconst { data } = await register({\r\n\t\t\t\tvariables: { ...formState },\r\n\t\t\t});\r\n\t\t\tconsole.log(data);\r\n\t\t\tAuth.login(data.register.token);\r\n\t\t\twindow.location(\"/Feed\");\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t// Sign up modal\r\n\t\t<Modal\r\n\t\t\topen={props.open}\r\n\t\t\tonClose={props.handleClose}\r\n\t\t\taria-labelledby='modal-modal-title'\r\n\t\t\taria-describedby='modal-modal-description'\r\n\t\t>\r\n\t\t\t<Box\r\n\t\t\t\tsx={{\r\n\t\t\t\t\tposition: \"absolute\",\r\n\t\t\t\t\ttop: \"50%\",\r\n\t\t\t\t\tleft: \"50%\",\r\n\t\t\t\t\ttransform: \"translate(-50%, -50%)\",\r\n\t\t\t\t\twidth: 400,\r\n\t\t\t\t\tbgcolor: \"background.paper\",\r\n\t\t\t\t\tboxShadow: 24,\r\n\t\t\t\t\tp: 4,\r\n\t\t\t\t\t\"@media (max-width: 600px)\": {\r\n\t\t\t\t\t\tposition: \"absolute\",\r\n\t\t\t\t\t\ttop: \"50%\",\r\n\t\t\t\t\t\tleft: \"50%\",\r\n\t\t\t\t\t\ttransform: \"translate(-50%, -50%)\",\r\n\t\t\t\t\t\twidth: \"70%\",\r\n\t\t\t\t\t\tbgcolor: \"background.paper\",\r\n\t\t\t\t\t\tboxShadow: 24,\r\n\t\t\t\t\t\tp: 4,\r\n\t\t\t\t\t},\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<Typography component='h1' variant='h5'>\r\n\t\t\t\t\tSign up\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Box\r\n\t\t\t\t\tcomponent='form'\r\n\t\t\t\t\tnoValidate\r\n\t\t\t\t\tonSubmit={handleFormSubmit}\r\n\t\t\t\t\tsx={{ mt: 3 }}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Grid container spacing={2}>\r\n\t\t\t\t\t\t<Grid item xs={12} sm={6}>\r\n\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\tautoComplete='given-name'\r\n\t\t\t\t\t\t\t\tname='first_name'\r\n\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\t\t\tid='firstName'\r\n\t\t\t\t\t\t\t\tlabel='First Name'\r\n\t\t\t\t\t\t\t\tautoFocus\r\n\t\t\t\t\t\t\t\tvalue={formState.first_name}\r\n\t\t\t\t\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={12} sm={6}>\r\n\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\t\t\tid='lastName'\r\n\t\t\t\t\t\t\t\tlabel='Last Name'\r\n\t\t\t\t\t\t\t\tname='last_name'\r\n\t\t\t\t\t\t\t\tautoComplete='family-name'\r\n\t\t\t\t\t\t\t\tvalue={formState.last_name}\r\n\t\t\t\t\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\t\t\tid='location'\r\n\t\t\t\t\t\t\t\tlabel='Location'\r\n\t\t\t\t\t\t\t\tname='location'\r\n\t\t\t\t\t\t\t\tautoComplete='location'\r\n\t\t\t\t\t\t\t\tvalue={formState.location}\r\n\t\t\t\t\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\t\t\tid='email'\r\n\t\t\t\t\t\t\t\tlabel='Email Address'\r\n\t\t\t\t\t\t\t\tname='email'\r\n\t\t\t\t\t\t\t\tautoComplete='email'\r\n\t\t\t\t\t\t\t\tvalue={formState.email}\r\n\t\t\t\t\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\t\t\tname='password'\r\n\t\t\t\t\t\t\t\tlabel='Password'\r\n\t\t\t\t\t\t\t\ttype='password'\r\n\t\t\t\t\t\t\t\tid='password'\r\n\t\t\t\t\t\t\t\tautoComplete='new-password'\r\n\t\t\t\t\t\t\t\tvalue={formState.password}\r\n\t\t\t\t\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\ttype='submit'\r\n\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\tsx={{ mt: 3, mb: 2, backgroundColor: \"#405C96\" }}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tSign Up\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Box>\r\n\t\t\t</Box>\r\n\t\t</Modal>\r\n\t);\r\n}\r\n\r\nexport default Register;\r\n","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\AddPet\\index.js",[],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\AddPet\\AddPet.js",["142","143","144","145","146","147","148","149"],"import * as React from \"react\";\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardMedia,\r\n  CardContent,\r\n  Button,\r\n  Grid,\r\n  TextField,\r\n  Box,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\n\r\nimport CloudinaryUploadWidget from \"../../components/UploadWidget\";\r\nimport auth from \"../../utils/auth\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport { useEffect } from \"react\";\r\nimport { ADD_PET } from \"../../utils/mutations\";\r\n\r\nconst RecipeReviewCard = () => {\r\n  const [picturesURL, setPicturesURL] = React.useState(\"\");\r\n  const [formState, setFormState] = React.useState({\r\n    pet_name: \"\",\r\n    species: \"\",\r\n    birthday: \"\",\r\n  });\r\n\r\n  const [addPet] = useMutation(ADD_PET);\r\n\r\n  const handlePictureUpload = picturesURL => {\r\n    setPicturesURL(picturesURL);\r\n  };\r\n\r\n  const handleInputChange = ({ target: { name, value } }) => {\r\n    setFormState({ ...formState, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (!picturesURL) {\r\n      return;\r\n    }\r\n    try {\r\n      console.log(formState);\r\n      console.log(`This is a string ${picturesURL}`);\r\n      const addPetForm = await addPet({\r\n\t\t\t\tvariables: {\r\n\t\t\t\t\tname: formState.pet_name,\r\n\t\t\t\t\tspecies: formState.species,\r\n\t\t\t\t\tbirthday: formState.birthday,\r\n\t\t\t\t\tpicturesURL: `${picturesURL}`,\r\n\t\t\t\t},\r\n\t\t\t});\r\n      window.location.replace(\"/profile\");\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card sx={{ maxWidth: 500, margin: \"50px auto\" }}>\r\n      <CardHeader title=\"Add a new pet!\" sx={{ textAlign: \"center\" }} />\r\n      {picturesURL && (\r\n        <CardMedia\r\n          sx={{\r\n            width: \"75%\",\r\n            height: 350,\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            margin: \"50px auto\"\r\n           }}\r\n\t\t\t\t\timage={picturesURL}\r\n\t\t\t\t\ttitle='Pet Image'\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t\t<CardContent>\r\n\t\t\t\t<Box\r\n\t\t\t\t\tcomponent='form'\r\n\t\t\t\t\tnoValidate\r\n          onSubmit={event => event.preventDefault()}\r\n\t\t\t\t\tsx={{ mt: 3 }}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Grid container spacing={2}>\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\tname='pet_name'\r\n\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\t\t\tid='petName'\r\n\t\t\t\t\t\t\t\tlabel='Pet Name'\r\n\t\t\t\t\t\t\t\tautoFocus\r\n\t\t\t\t\t\t\t\tvalue={formState.pet_name}\r\n\t\t\t\t\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\t\t\tid='species'\r\n\t\t\t\t\t\t\t\tlabel='Species'\r\n\t\t\t\t\t\t\t\tname='species'\r\n\t\t\t\t\t\t\t\tvalue={formState.species}\r\n\t\t\t\t\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\t\t\tid='birthday'\r\n\t\t\t\t\t\t\t\tlabel='Birthday'\r\n\t\t\t\t\t\t\t\tname='birthday'\r\n\t\t\t\t\t\t\t\tvalue={formState.birthday}\r\n\t\t\t\t\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<h2>Upload an Image</h2>\r\n\t\t\t\t\t\t\t\t<CloudinaryUploadWidget setPicturesURL={setPicturesURL} />\r\n\t\t\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\t\t\t\ttype='submit'\r\n\t\t\t\t\t\t\t\t\tonClick={handleFormSubmit}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tSave Pet\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid container justifyContent='center'></Grid>\r\n\t\t\t\t</Box>\r\n\t\t\t</CardContent>\r\n\t\t</Card>\r\n\t);\r\n};\r\n\r\nexport default RecipeReviewCard;\r\n","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\queries.js",[],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Matches\\index.js",[],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Matches\\Match.js",["150","151","152","153"],"import { useQuery } from \"@apollo/client\";\r\nimport { QUERY_USER, QUERY_OWNER } from \"../../utils/queries\";\r\nimport { getDistance } from \"geolib\";\r\nimport auth from \"../../utils/auth.js\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { useState } from \"react\";\r\n\r\nasync function findLatLon(city) {\r\n\tlet latLon = { lat: \"\", lon: \"\" };\r\n\tconst geoAPI = `https://api.openweathermap.org/geo/1.0/direct?q=${city}&appid=1560a07c19638ebfb003c32577cdfee1`;\r\n\tlet response = await fetch(geoAPI);\r\n\tlet data = await response.json();\r\n\tlatLon.lat = data[0].lat;\r\n\tlatLon.lon = data[0].lon;\r\n\treturn latLon;\r\n}\r\n\r\nasync function distanceCalc(userLocation, otherLocation) {\r\n\tlet location1 = userLocation.toLowerCase();\r\n\tlocation1 = location1.replace(\" \", \"_\");\r\n\tlet location2 = otherLocation.toLowerCase();\r\n\tlocation2 = location2.replace(\" \", \"_\");\r\n\tconst userLatLon = await findLatLon(location1);\r\n\tconst otherLatLon = await findLatLon(location2);\r\n\tconst userLat = userLatLon.lat;\r\n\tconst userLon = userLatLon.lon;\r\n\tconst otherLat = otherLatLon.lat;\r\n\tconst otherLon = otherLatLon.lon;\r\n\tlet distance = getDistance(\r\n\t\t{ latitude: userLat, longitude: userLon },\r\n\t\t{ latitude: otherLat, longitude: otherLon }\r\n\t);\r\n\tdistance = distance / 1609;\r\n\tconst finalDistance = Math.round(distance);\r\n\treturn finalDistance;\r\n}\r\n\r\nfunction Match(props) {\r\n  const [distance, setDistance] = useState(0);\r\n  // const { loading: ownerLoading, data: ownerData } = useQuery(QUERY_OWNER, {\r\n  //   variables: { ownerId: props.pet.owner },\r\n  // });\r\n  // const owner = ownerData?.owner || {};\r\n  const ownerLocation = props.pet.owner.location;\r\n  const userLocation = props.userData.user.location;\r\n  function calculateDistance() {\r\n    distanceCalc(ownerLocation, userLocation).then((res) => {\r\n      setDistance(res);\r\n    });\r\n  }\r\n  return (\r\n    // <>\r\n    //   {ownerLoading ? (\r\n    //     <div>Loading...</div>\r\n    //   ) : (\r\n        <>\r\n          {calculateDistance()}\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            Owner: {props.pet.owner.first_name} {props.pet.owner.last_name}\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            {distance} Miles Away\r\n          </Typography>\r\n        </>\r\n      // )}\r\n    // </>\r\n  );\r\n}\r\n\r\n// findLatLon(\"fountain_valley\");\r\n\r\nexport default Match;\r\n","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\components\\UploadWidget.js",["154","155"],"import React, { useState, Component } from \"react\";\r\nimport ImageUpload from \"../components/ImageUpload\";\r\n\r\nimport \"../widgetApp.css\";\r\n\r\n\r\n\r\nclass CloudinaryUploadWidget extends Component {\r\n\tcomponentDidMount() {\r\n\t\tvar myWidget = window.cloudinary.createUploadWidget(\r\n\t\t\t{\r\n\t\t\t\tcloudName: \"dkm1ip3w2\",\r\n\t\t\t\tuploadPreset: \"ABCDE12345\",\r\n\t\t\t\tsources: [\"url\", \"camera\", \"local\"],\r\n\t\t\t\tshowSkipCropButton: false,\r\n\t\t\t\tmultiple: true,\r\n\t\t\t\tdefaultSource: \"local\",\r\n\t\t\t},\r\n\t\t\t(error, result) => {\r\n\t\t\t\tif (!error && result && result.event === \"success\") {\r\n\t\t\t\t\tconsole.log(\"Done! Here is the image URL: \", result.info.url);\r\n\t\t\t\t\tthis.props.setPicturesURL(result.info.url);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\tdocument.getElementById(\"upload_widget\").addEventListener(\r\n\t\t\t\"click\",\r\n\t\t\tfunction () {\r\n\t\t\t\tmyWidget.open();\r\n\t\t\t},\r\n\t\t\tfalse\r\n\t\t);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<button id='upload_widget' className='cloudinary-button'>\r\n\t\t\t\tAdd a Photo\r\n\t\t\t</button>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default CloudinaryUploadWidget;\r\n","C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\components\\ImageUpload.js",[],"C:\\Users\\jpiro\\coding\\final-project\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\CloudinaryService.js",[],{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"161","line":94,"column":22,"nodeType":"162","messageId":"163","endLine":94,"endColumn":37},{"ruleId":"160","severity":1,"message":"164","line":99,"column":22,"nodeType":"162","messageId":"163","endLine":99,"endColumn":36},{"ruleId":"165","severity":1,"message":"166","line":148,"column":8,"nodeType":"167","endLine":148,"endColumn":16,"suggestions":"168"},{"ruleId":"169","severity":1,"message":"170","line":28,"column":1,"nodeType":"171","endLine":28,"endColumn":34},{"ruleId":"160","severity":1,"message":"172","line":1,"column":17,"nodeType":"162","messageId":"163","endLine":1,"endColumn":25},{"ruleId":"160","severity":1,"message":"173","line":1,"column":27,"nodeType":"162","messageId":"163","endLine":1,"endColumn":36},{"ruleId":"160","severity":1,"message":"174","line":2,"column":10,"nodeType":"162","messageId":"163","endLine":2,"endColumn":21},{"ruleId":"160","severity":1,"message":"175","line":7,"column":7,"nodeType":"162","messageId":"163","endLine":7,"endColumn":13},{"ruleId":"160","severity":1,"message":"176","line":4,"column":8,"nodeType":"162","messageId":"163","endLine":4,"endColumn":18},{"ruleId":"160","severity":1,"message":"177","line":7,"column":10,"nodeType":"162","messageId":"163","endLine":7,"endColumn":22},{"ruleId":"160","severity":1,"message":"178","line":8,"column":10,"nodeType":"162","messageId":"163","endLine":8,"endColumn":18},{"ruleId":"179","severity":1,"message":"180","line":93,"column":25,"nodeType":"181","endLine":93,"endColumn":30},{"ruleId":"179","severity":1,"message":"180","line":98,"column":23,"nodeType":"181","endLine":98,"endColumn":28},{"ruleId":"160","severity":1,"message":"182","line":15,"column":34,"nodeType":"162","messageId":"163","endLine":15,"endColumn":45},{"ruleId":"160","severity":1,"message":"172","line":17,"column":10,"nodeType":"162","messageId":"163","endLine":17,"endColumn":18},{"ruleId":"160","severity":1,"message":"173","line":17,"column":20,"nodeType":"162","messageId":"163","endLine":17,"endColumn":29},{"ruleId":"160","severity":1,"message":"183","line":39,"column":13,"nodeType":"162","messageId":"163","endLine":39,"endColumn":20},{"ruleId":"160","severity":1,"message":"184","line":26,"column":19,"nodeType":"162","messageId":"163","endLine":26,"endColumn":24},{"ruleId":"160","severity":1,"message":"185","line":26,"column":26,"nodeType":"162","messageId":"163","endLine":26,"endColumn":30},{"ruleId":"160","severity":1,"message":"186","line":106,"column":7,"nodeType":"162","messageId":"163","endLine":106,"endColumn":25},{"ruleId":"160","severity":1,"message":"187","line":114,"column":7,"nodeType":"162","messageId":"163","endLine":114,"endColumn":15},{"ruleId":"160","severity":1,"message":"184","line":18,"column":21,"nodeType":"162","messageId":"163","endLine":18,"endColumn":26},{"ruleId":"160","severity":1,"message":"185","line":18,"column":28,"nodeType":"162","messageId":"163","endLine":18,"endColumn":32},{"ruleId":"160","severity":1,"message":"176","line":11,"column":3,"nodeType":"162","messageId":"163","endLine":11,"endColumn":13},{"ruleId":"160","severity":1,"message":"188","line":13,"column":8,"nodeType":"162","messageId":"163","endLine":13,"endColumn":15},{"ruleId":"160","severity":1,"message":"189","line":16,"column":8,"nodeType":"162","messageId":"163","endLine":16,"endColumn":12},{"ruleId":"160","severity":1,"message":"190","line":17,"column":10,"nodeType":"162","messageId":"163","endLine":17,"endColumn":20},{"ruleId":"160","severity":1,"message":"178","line":18,"column":23,"nodeType":"162","messageId":"163","endLine":18,"endColumn":31},{"ruleId":"160","severity":1,"message":"173","line":19,"column":10,"nodeType":"162","messageId":"163","endLine":19,"endColumn":19},{"ruleId":"160","severity":1,"message":"191","line":32,"column":9,"nodeType":"162","messageId":"163","endLine":32,"endColumn":28},{"ruleId":"160","severity":1,"message":"192","line":48,"column":13,"nodeType":"162","messageId":"163","endLine":48,"endColumn":23},{"ruleId":"160","severity":1,"message":"178","line":1,"column":10,"nodeType":"162","messageId":"163","endLine":1,"endColumn":18},{"ruleId":"160","severity":1,"message":"193","line":2,"column":10,"nodeType":"162","messageId":"163","endLine":2,"endColumn":20},{"ruleId":"160","severity":1,"message":"182","line":2,"column":22,"nodeType":"162","messageId":"163","endLine":2,"endColumn":33},{"ruleId":"160","severity":1,"message":"189","line":4,"column":8,"nodeType":"162","messageId":"163","endLine":4,"endColumn":12},{"ruleId":"160","severity":1,"message":"172","line":1,"column":17,"nodeType":"162","messageId":"163","endLine":1,"endColumn":25},{"ruleId":"160","severity":1,"message":"194","line":2,"column":8,"nodeType":"162","messageId":"163","endLine":2,"endColumn":19},"no-native-reassign",["195"],"no-negated-in-lhs",["196"],"no-unused-vars","'userChatLoading' is assigned a value but never used.","Identifier","unusedVar","'friendsLoading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has an unnecessary dependency: 'socket'. Either exclude it or remove the dependency array. Outer scope values like 'socket' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["197"],"import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration","'useState' is defined but never used.","'useEffect' is defined but never used.","'useMutation' is defined but never used.","'LOGOUT' is assigned a value but never used.","'Typography' is defined but never used.","'QUERY_MYPETS' is defined but never used.","'useQuery' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'QUERY_OWNER' is defined but never used.","'addChat' is assigned a value but never used.","'error' is assigned a value but never used.","'data' is assigned a value but never used.","'QUERY_UPLOAD_PHOTO' is assigned a value but never used.","'formData' is assigned a value but never used.","'AddIcon' is defined but never used.","'auth' is defined but never used.","'useHistory' is defined but never used.","'handlePictureUpload' is assigned a value but never used.","'addPetForm' is assigned a value but never used.","'QUERY_USER' is defined but never used.","'ImageUpload' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"198","fix":"199"},"Update the dependencies array to be: []",{"range":"200","text":"201"},[4221,4229],"[]"]
>>>>>>> d6a602d5057754e3e16080ea66e1ad30c409292d

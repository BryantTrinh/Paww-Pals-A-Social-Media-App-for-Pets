[{"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\index.js":"1","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\App.js":"2","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\components\\Navbar.js":"3","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\components\\ChatBox.js":"4","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Logout\\index.js":"5","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Home\\index.js":"6","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\auth.js":"7","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Feed\\index.js":"8","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Profile\\index.js":"9","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Logout\\Logout.js":"10","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Home\\Home.js":"11","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Profile\\Profile.js":"12","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Feed\\Feed.js":"13","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Login\\index.js":"14","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Login\\Login.js":"15","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\mutations.js":"16","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Register\\index.js":"17","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Register\\Register.js":"18","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Matches\\index.js":"19","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Matches\\Match.js":"20","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\queries.js":"21","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\AddPet\\index.js":"22","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\AddPet\\AddPet.js":"23"},{"size":219,"mtime":1675358476011,"results":"24","hashOfConfig":"25"},{"size":1361,"mtime":1675367686876,"results":"26","hashOfConfig":"25"},{"size":4602,"mtime":1675358476010,"results":"27","hashOfConfig":"25"},{"size":13651,"mtime":1675631136430,"results":"28","hashOfConfig":"25"},{"size":39,"mtime":1675358476016,"results":"29","hashOfConfig":"25"},{"size":37,"mtime":1675105307904,"results":"30","hashOfConfig":"25"},{"size":503,"mtime":1675465587205,"results":"31","hashOfConfig":"25"},{"size":32,"mtime":1675358476013,"results":"32","hashOfConfig":"25"},{"size":42,"mtime":1675358476019,"results":"33","hashOfConfig":"25"},{"size":1054,"mtime":1675361934614,"results":"34","hashOfConfig":"25"},{"size":776,"mtime":1675631327733,"results":"35","hashOfConfig":"25"},{"size":2899,"mtime":1675462964062,"results":"36","hashOfConfig":"25"},{"size":2955,"mtime":1675630199011,"results":"37","hashOfConfig":"25"},{"size":38,"mtime":1675105307904,"results":"38","hashOfConfig":"25"},{"size":3262,"mtime":1675361934613,"results":"39","hashOfConfig":"25"},{"size":2317,"mtime":1675581381794,"results":"40","hashOfConfig":"25"},{"size":41,"mtime":1675105307905,"results":"41","hashOfConfig":"25"},{"size":4124,"mtime":1675452827073,"results":"42","hashOfConfig":"25"},{"size":38,"mtime":1675358476017,"results":"43","hashOfConfig":"25"},{"size":2324,"mtime":1675464598259,"results":"44","hashOfConfig":"25"},{"size":1411,"mtime":1675581381795,"results":"45","hashOfConfig":"25"},{"size":34,"mtime":1675367686877,"results":"46","hashOfConfig":"25"},{"size":4371,"mtime":1675460828587,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1obk5xj",{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"50"},"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\index.js",[],["105","106"],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\App.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\components\\Navbar.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\components\\ChatBox.js",["107","108","109"],"import * as React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ForumIcon from \"@mui/icons-material/Forum\";\nimport SendIcon from \"@mui/icons-material/Send\";\nimport {\n  Modal,\n  Typography,\n  Box,\n  Grid,\n  TextField,\n  Backdrop,\n  Button,\n  Tabs,\n  Tab,\n} from \"@mui/material\";\nimport { useQuery } from \"@apollo/client\";\nimport { QUERY_USER_CHATS, QUERY_FRIENDS_LIST } from \"../utils/queries\";\n\nimport auth from \"../utils/auth\";\n\nimport io from \"socket.io-client\";\nconst socket = io.connect(\"http://localhost:3001\");\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n      style={{ height: \"92%\" }}\n    >\n      {value === index && (\n        <Box sx={{ height: \"100%\" }}>\n          <Box sx={{ height: \"100%\" }}>{children}</Box>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.number.isRequired,\n  value: PropTypes.number.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    \"aria-controls\": `simple-tabpanel-${index}`,\n  };\n}\n\nfunction ChatBox() {\n  // Show chat box modal use state\n  const [open, setOpen] = React.useState(false);\n  const handleOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => setOpen(false);\n\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const userMessageStyle = {\n    color: \"white\",\n    lineHeight: \"1.5\",\n    backgroundColor: \"primary.main\",\n    m: \"10px 10px 20px 10px\",\n    p: \"5px 20px\",\n    borderRadius: \"16px 16px 0 16px\",\n    maxWidth: \"40%\",\n    overflowWrap: \"break-word\",\n  };\n\n  const friendMessageStyle = {\n    color: \"black\",\n    lineHeight: \"1.5\",\n    backgroundColor: \"grey.400\",\n    m: \"10px 10px 20px 10px\",\n    p: \"5px 20px\",\n    borderRadius: \"16px 16px 16px 0px\",\n    maxWidth: \"40%\",\n    overflowWrap: \"break-word\",\n  };\n\n  // Getting array of user's chats\n  const { loading: userChatLoading, data: userChats } =\n    useQuery(QUERY_USER_CHATS);\n  const myId = userChats?.getUserChats || {};\n  console.log(myId);\n\n  // Getting array of friends object ID\n  const { loading: friendsLoading, data: userFriends } = useQuery(\n    QUERY_FRIENDS_LIST,\n    {\n      variables: { ownerId: myId._id },\n    }\n  );\n  const userFriendsData = userFriends?.owner || {};\n  const userFriendsList = userFriendsData.friends || [];\n\n  // Socket.io stuff\n  const [message, setMessage] = React.useState(\"\");\n  const [messageReceived, setMessageReceived] = React.useState([]);\n  const [room, setRoom] = React.useState(\"\");\n  const [chatAnnounce, setChatAnnounce] = React.useState(\"\");\n  const [chatStyle, setChatStyle] = React.useState(\"\");\n\n  const ChatBubblesRef = React.useRef(null);\n\n  // Logic to create chatroom ID\n  const createChatRoomID = (event) => {\n    const IdArr = [];\n    IdArr.push(event.target.firstElementChild.id);\n    IdArr.push(myId);\n    IdArr.sort();\n    const roomID = IdArr.toString();\n\n    setChatAnnounce(`You're in a chat with ${event.target.id}`);\n    setRoom(roomID);\n    setChatStyle(event.target.firstElementChild.id);\n    setValue(1);\n\n    socket.emit(\"joinRoom\", roomID);\n  };\n\n  const sendMessage = () => {\n    if (message === \"\") {\n      return;\n    } else if (room === \"\") {\n      console.log(\"You're not in a room!\");\n      return;\n    }\n    socket.emit(\"sendMessage\", { message, myId, room });\n  };\n\n  React.useEffect(() => {\n    socket.on(\"receiveMessage\", (data) => {\n      setMessageReceived(data);\n      setMessage(\"\");\n    });\n  }, [socket]);\n\n  React.useEffect(() => {\n    ChatBubblesRef.current?.scrollIntoView();\n  }, [messageReceived]);\n\n  // React components to map\n  function DisplayChats(props) {\n    return (\n      <>\n        <Box\n          sx={{\n            height: \"2px\",\n            marginBottom: \"5px\",\n            backgroundColor: \"#E4E4E4\",\n          }}\n        ></Box>\n        <Button\n          variant={chatStyle === props.friendID ? \"contained\" : \"text\"}\n          sx={{ width: \"100%\", marginBottom: \"5px\" }}\n          onClick={createChatRoomID}\n          id={props.fullName}\n        >\n          <input hidden={true} id={props.friendID} />\n          {props.fullName}\n        </Button>\n      </>\n    );\n  }\n\n  function ChatBubble(props) {\n    const timeStamp = new Date(props.timeStamp);\n    const timeSetting = {\n      month: \"2-digit\",\n      day: \"2-digit\",\n      year: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    };\n    const newTimeStamp = timeStamp\n      .toLocaleDateString(\"en-US\", timeSetting)\n      .split(\",\")\n      .join(\"\");\n\n    return (\n      <>\n        <Box\n          textAlign={props.sender === myId ? \"right\" : \"left\"}\n          fontSize=\"14px\"\n          color=\"grey.400\"\n        >\n          {newTimeStamp}\n        </Box>\n        <Grid\n          container\n          justifyContent={props.sender === myId ? \"flex-end\" : \"flex-start\"}\n        >\n          <Typography\n            variant=\"h6\"\n            component=\"div\"\n            sx={props.sender === myId ? userMessageStyle : friendMessageStyle}\n          >\n            {props.message}\n          </Typography>\n        </Grid>\n      </>\n    );\n  }\n\n  return (\n    <>\n      {auth.loggedIn() ? (\n        <ForumIcon\n          sx={{\n            position: \"fixed\",\n            zIndex: 50,\n            right: \"3%\",\n            bottom: \"3%\",\n            width: 40,\n            height: 40,\n            \"&:hover\": {\n              cursor: \"pointer\",\n            },\n          }}\n          onClick={handleOpen}\n        />\n      ) : (\n        <></>\n      )}\n      <Backdrop sx={{ color: \"#fff\", zIndex: 10 }} open={open}>\n        <Modal\n          open={open}\n          onClose={handleClose}\n          aria-labelledby=\"modal-modal-title\"\n          aria-describedby=\"modal-modal-description\"\n          sx={{ height: \"100vh\" }}\n        >\n          <Box\n            sx={{\n              position: \"absolute\",\n              top: \"50%\",\n              left: \"50%\",\n              transform: \"translate(-50%, -50%)\",\n              width: \"70%\",\n              height: \"70%\",\n              bgcolor: \"background.paper\",\n              boxShadow: 24,\n              p: 2,\n              borderRadius: 5,\n            }}\n          >\n            {/* Medium screen breakpoint chat layout */}\n            <Grid\n              container\n              sx={{ height: \"100%\", display: { xs: \"none\", md: \"flex\" } }}\n            >\n              <Grid\n                item\n                sm={3}\n                sx={{\n                  borderRight: \"2px solid #E4E4E4\",\n                  p: \"0 16px 0 0\",\n                }}\n              >\n                <Typography\n                  variant=\"h6\"\n                  component=\"h2\"\n                  sx={{ textAlign: \"center\", marginBottom: \"20px\" }}\n                >\n                  Chats\n                </Typography>\n                <Box overflow=\"auto\">\n                  {userFriendsList.map((friend) => (\n                    <DisplayChats\n                      key={friend._id}\n                      fullName={`${friend.first_name} ${friend.last_name}`}\n                      friendID={friend._id}\n                    />\n                  ))}\n                </Box>\n              </Grid>\n              <Grid\n                item\n                sm={9}\n                sx={{\n                  p: \"0 0 0 16px\",\n                  height: \"100%\",\n                }}\n              >\n                <Grid\n                  container\n                  direction=\"column\"\n                  justifyContent=\"flex-end\"\n                  sx={{ height: \"100%\", flexWrap: \"nowrap\" }}\n                >\n                  <Grid item>\n                    <Typography>{chatAnnounce}</Typography>\n                  </Grid>\n                  <Grid item sx={{ overflow: \"auto\" }}>\n                    {messageReceived.map((data) => (\n                      <ChatBubble\n                        key={data._id}\n                        sender={data.sender}\n                        message={data.message}\n                        timeStamp={data.createdAt}\n                      />\n                    ))}\n                    <div ref={ChatBubblesRef} />\n                  </Grid>\n                  <Grid item>\n                    <Box\n                      component=\"form\"\n                      onSubmit={(event) => {\n                        event.preventDefault();\n                        sendMessage();\n                      }}\n                    >\n                      <Grid container justifyContent=\"center\" gap={1}>\n                        <Grid item xs>\n                          <TextField\n                            fullWidth\n                            size=\"small\"\n                            placeholder=\"Your message here...\"\n                            id=\"textfield\"\n                            value={message}\n                            onChange={(event) => {\n                              setMessage(event.target.value);\n                            }}\n                          />\n                        </Grid>\n                        <Grid item xs={2}>\n                          <Grid\n                            container\n                            justifyContent=\"center\"\n                            alignItems=\"center\"\n                            sx={{ height: 1 }}\n                          >\n                            <Button\n                              variant=\"contained\"\n                              endIcon={<SendIcon />}\n                              type=\"submit\"\n                            >\n                              Send\n                            </Button>\n                          </Grid>\n                        </Grid>\n                      </Grid>\n                    </Box>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n            {/* Small screen breakpoint chat layout */}\n            <Grid\n              container\n              sx={{ height: \"100%\", display: { xs: \"flex\", md: \"none\" } }}\n            >\n              <Grid\n                container\n                direction=\"column\"\n                flexWrap=\"nowrap\"\n                sx={{ height: \"100%\" }}\n              >\n                <Grid\n                  item\n                  xs={1}\n                  sx={{ borderBottom: 1, borderColor: \"divider\" }}\n                >\n                  <Tabs value={value} onChange={handleChange} centered>\n                    <Tab label=\"Chats\" {...a11yProps(0)} />\n                    <Tab label=\"Message\" {...a11yProps(1)} />\n                  </Tabs>\n                </Grid>\n                <TabPanel value={value} index={0}>\n                  {userFriendsList.map((friend) => (\n                    <DisplayChats\n                      key={friend._id}\n                      fullName={`${friend.first_name} ${friend.last_name}`}\n                      friendID={friend._id}\n                    />\n                  ))}\n                </TabPanel>\n                <TabPanel value={value} index={1}>\n                  <Grid\n                    container\n                    direction=\"column\"\n                    justifyContent=\"flex-end\"\n                    flexWrap=\"nowrap\"\n                    height=\"100%\"\n                  >\n                    <Grid item>\n                      <Typography>{chatAnnounce}</Typography>\n                    </Grid>\n                    <Grid item sx={{ overflow: \"auto\" }} id=\"messageField\">\n                      {messageReceived.map((data) => (\n                        <ChatBubble\n                          key={data._id}\n                          sender={data.sender}\n                          message={data.message}\n                          timeStamp={data.createdAt}\n                        />\n                      ))}\n                    </Grid>\n                    <Grid item>\n                      <Box\n                        component=\"form\"\n                        onSubmit={(event) => {\n                          event.preventDefault();\n                          sendMessage();\n                        }}\n                      >\n                        <Grid container justifyContent=\"center\">\n                          <Grid item xs>\n                            <TextField\n                              fullWidth\n                              size=\"small\"\n                              placeholder=\"Your message here...\"\n                              id=\"textfield\"\n                              value={message}\n                              onChange={(event) => {\n                                setMessage(event.target.value);\n                              }}\n                            />\n                          </Grid>\n                          <Grid item>\n                            <Grid\n                              container\n                              justifyContent=\"center\"\n                              alignItems=\"center\"\n                              sx={{ height: 1 }}\n                            >\n                              <Button variant=\"contained\" type=\"submit\">\n                                <SendIcon />\n                              </Button>\n                            </Grid>\n                          </Grid>\n                        </Grid>\n                      </Box>\n                    </Grid>\n                  </Grid>\n                </TabPanel>\n              </Grid>\n            </Grid>\n          </Box>\n        </Modal>\n      </Backdrop>\n    </>\n  );\n}\n\nexport default ChatBox;\n","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Logout\\index.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Home\\index.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\auth.js",["110"],"import decode from \"jwt-decode\";\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    const token = this.getToken();\n    return token ? true : false;\n  }\n\n  getToken() {\n    return localStorage.getItem(\"auth_token\");\n  }\n\n  login(token) {\n    localStorage.setItem(\"auth_token\", token);\n    window.location.assign(\"/feed\");\n  }\n\n  logout() {\n    localStorage.removeItem(\"auth_token\");\n    window.location.assign(\"/\");\n  }\n}\n\nexport default new AuthService();\n","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Feed\\index.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Profile\\index.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Logout\\Logout.js",["111","112","113","114"],"import React, { useState, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { Button } from \"@mui/material\";\nimport auth from \"../../utils/auth.js\";\n\nconst LOGOUT = gql`\n  mutation Logout {\n    logout\n  }\n`;\n\nfunction LogoutForm() {\n  // const [logout, { data }] = useMutation(LOGOUT);\n  // const [isLoggedOut, setIsLoggedOut] = useState(false);\n\n  // useEffect(() => {\n  //   if (data) {\n  //     auth.logout();\n  //     setIsLoggedOut(true);\n  //   }\n  // }, [data]);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    await auth.logout();\n  };\n\n  // if (isLoggedOut) {\n  //   return <p>You have successfully logged out.</p>;\n  // }\n\n  return (\n    <Button\n      onClick={handleSubmit}\n      variant=\"outlined\"\n      sx={{\n        color: \"white\",\n        borderColor: \"white\",\n        ml: \"20px\",\n        \"&:hover\": {\n          color: \"#DE4567\",\n          borderColor: \"#DE4567\",\n        },\n      }}\n    >\n      Logout\n    </Button>\n  );\n}\n\nexport default LogoutForm;\n","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Home\\Home.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Profile\\Profile.js",["115"],"import * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport Modal from \"@mui/material/Modal\";\nimport \"./Profile.css\";\nimport { QUERY_MYPETS } from \"../../utils/queries\";\nimport { useQuery } from \"@apollo/client\";\n\nconst style = {\n  position: \"absolute\",\n  top: \"50%\",\n  left: \"50%\",\n  transform: \"translate(-50%, -50%)\",\n  width: 400,\n  bgcolor: \"background.paper\",\n  border: \"2px solid #000\",\n  boxShadow: 24,\n  pt: 2,\n  px: 4,\n  pb: 3,\n};\n\nexport default function Profile() {\n  const [open, setOpen] = React.useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  const { loading, data } = useQuery(QUERY_MYPETS);\n  const petList = data?.myPets || [];\n  if (!loading) {\n    console.log(data);\n  }\n  return (\n    <section className=\"page\">\n      <div id=\"pets-header\">\n        <h1>Your Pets</h1>\n      </div>\n      <div className=\"pets-section\">\n        <div className=\"pets-container\">\n          <ul>\n            <li>\n              <div>\n                <Button\n                  onClick={handleOpen}\n                  sx={{\n                    padding: \"32em 32em 0 0\",\n                    margin: \"8em\",\n                    display: \"flex\",\n                    alignItems: \"flex-end\",\n                    textDecoration: \"none\",\n                    backgroundSize: \"100%\",\n                    backgroundColor: \"rgba(0, 0, 0, 0.484)\",\n                    backgroundBlendMode: \"soft-light\",\n                    transitionDuration: \"1s\",\n                    backgroundImage:\n                      'url(\"https://i.pinimg.com/564x/a5/e3/d7/a5e3d756ae332a8ca01f3ad7c0c54aa8.jpg\")',\n                    \"&:hover\": {\n                      transition: \"1s\",\n                      backgroundColor: \"rgba(0,0,0,0)\",\n                    },\n                  }}\n                >\n                  <div className=\"text-background\">\n                    <h3>Kuro</h3>\n                  </div>\n                </Button>\n                <Modal\n                  open={open}\n                  onClose={handleClose}\n                  aria-labelledby=\"modal-modal-title\"\n                  aria-describedby=\"modal-modal-description\"\n                >\n                  <Box sx={style}>\n                    <Typography\n                      id=\"modal-modal-title\"\n                      variant=\"h6\"\n                      component=\"h2\"\n                    >\n                      Meow\n                    </Typography>\n                    <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\n                      Meow.. Meow meow meow meow? meow, mewoemowmeowme..\n                    </Typography>\n                  </Box>\n                </Modal>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </section>\n  );\n}\n","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Feed\\Feed.js",["116","117","118","119"],"import * as React from \"react\";\nimport {\n  Grid,\n  Button,\n  Card,\n  CardHeader,\n  CardMedia,\n  CardContent,\n  CardActions,\n  Typography,\n} from \"@mui/material\";\nimport ChatIcon from \"@mui/icons-material/Chat\";\nimport Match from \"../Matches\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { QUERY_PETS, QUERY_USER, QUERY_OWNER } from \"../../utils/queries.js\";\nimport { CREATE_CHAT } from \"../../utils/mutations\";\nimport { useState, useEffect } from \"react\";\nimport dayjs from \"dayjs\";\n\nexport default function RecipeReviewCard() {\n  const { loading: petsLoading, data: petsData } = useQuery(QUERY_PETS);\n  let petList = petsData?.pets || [];\n\n  const now = dayjs().format(\"YYYY-MM-DD\");\n  const { loading: userLoading, data: userData } = useQuery(QUERY_USER);\n\n  const [createChat] = useMutation(CREATE_CHAT);\n\n  // Creating roomID using pet's owner and user ID\n  const addToChat = async (event) => {\n    if (!petsLoading && !userLoading) {\n      const IdArr = [];\n      IdArr.push(event.target.firstElementChild.id);\n      IdArr.push(userData.user._id);\n      IdArr.sort();\n      const roomID = IdArr.toString();\n\n      const addChat = await createChat({\n        variables: { roomID: roomID },\n      });\n    }\n  };\n\n  return (\n    <Grid\n      container\n      justifyContent=\"center\"\n      gap={4}\n      sx={{ marginTop: \"20px\", padding: \"0 20px\" }}\n    >\n      {petsLoading || userLoading ? (\n        <div>Loading...</div>\n      ) : (\n        <>\n          {petList.map((pet) => {\n            return (\n              <Grid item xs={12} sm={6} md={3} key={pet._id}>\n                <Card sx={{ maxWidth: 345 }}>\n                  <CardHeader title={pet.name} />\n                  <CardMedia\n                    component=\"img\"\n                    height=\"194\"\n                    image={pet.picture}\n                    alt=\"pet profile picture\"\n                  />\n                  <CardContent>\n                    <Match pet={pet} userData={userData} />\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Age: {dayjs(now).diff(dayjs(pet.birthday), \"year\")}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Species: {pet.species}\n                    </Typography>\n                  </CardContent>\n                  <CardActions\n                    disableSpacing\n                    sx={{ display: \"flex\", justifyContent: \"flex-end\" }}\n                  >\n                    <Button\n                      variant=\"contained\"\n                      endIcon={<ChatIcon />}\n                      onClick={addToChat}\n                    >\n                      ADD TO CHAT\n                      <input hidden={true} id={pet.owner}></input>\n                    </Button>\n                  </CardActions>\n                </Card>\n              </Grid>\n            );\n          })}\n        </>\n      )}\n    </Grid>\n  );\n}\n","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Login\\index.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Login\\Login.js",["120","121"],"import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { LOGIN_USER } from \"../../utils/mutations\";\nimport {\n  Grid,\n  Box,\n  Avatar,\n  Typography,\n  TextField,\n  Button,\n  Link,\n  Paper,\n} from \"@mui/material\";\nimport PetsIcon from \"@mui/icons-material/Pets\";\n\nimport Auth from \"../../utils/auth.js\";\nimport Register from \"../Register\";\n\nfunction Login() {\n  const [formState, setFormState] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  const [Login, { error, data }] = useMutation(LOGIN_USER);\n\n  const handleInputChange = ({ target: { name, value } }) => {\n    setFormState({ ...formState, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await Login({\n        variables: { ...formState },\n      });\n\n      Auth.login(data.login.token);\n      console.log(Auth.getProfile());\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // Show sign up modal use state\n  const [open, setOpen] = React.useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  return (\n    <>\n      <Grid\n        item\n        xs={12}\n        sm={8}\n        md={5}\n        component={Paper}\n        elevation={6}\n        square\n        sx={{\n          backgroundColor: \"#F8F5F2\",\n        }}\n      >\n        <Box\n          sx={{\n            my: 8,\n            mx: 4,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            backgroundColor: \"#F8F5F2\",\n          }}\n        >\n          <Avatar sx={{ m: 1, bgcolor: \"#DE4567\" }}>\n            <PetsIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            LOG IN\n          </Typography>\n          <Box\n            component=\"form\"\n            noValidate\n            onSubmit={handleFormSubmit}\n            sx={{ mt: 1 }}\n          >\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Email Address\"\n              name=\"email\"\n              autoComplete=\"email\"\n              autoFocus\n              value={formState.email}\n              onChange={handleInputChange}\n            />\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n              value={formState.password}\n              onChange={handleInputChange}\n            />\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2, backgroundColor: \"#405C96\" }}\n            >\n              LOG IN\n            </Button>\n            <Grid container>\n              <Grid item>\n                <Link onClick={handleOpen} variant=\"body2\">\n                  {\"Don't have an account? Sign Up\"}\n                </Link>\n              </Grid>\n            </Grid>\n          </Box>\n        </Box>\n      </Grid>\n      <Register handleClose={handleClose} open={open} />\n    </>\n  );\n}\n\nexport default Login;\n","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\mutations.js",["122","123"],"import { gql, useMutation } from \"@apollo/client\";\n\nexport const REGISTER_USER = gql`\n  mutation register(\n    $first_name: String!\n    $last_name: String!\n    $email: String!\n    $password: String!\n    $location: String!\n  ) {\n    register(\n      first_name: $first_name\n      last_name: $last_name\n      email: $email\n      password: $password\n      location: $location\n    ) {\n      token\n      user {\n        _id\n        first_name\n        last_name\n        email\n        location\n      }\n    }\n  }\n`;\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        first_name\n        last_name\n        email\n      }\n    }\n  }\n`;\n\nconst LOGOUT_MUTATION = gql`\n  mutation LogoutMutation {\n    logout\n  }\n`;\n\nexport const ADD_PET = gql`\n  mutation addPet(\n    $name: String!\n    $species: String!\n    $birthday: Date!\n    $pictures: String!\n    $owner: ID\n  ) {\n    addPet(\n      name: $name\n      species: $species\n      birthday: $birthday\n      pictures: $pictures\n      owner: $owner\n    ) {\n      _id\n      name\n      species\n      birthday\n      pictures\n    }\n  }\n`;\n\nexport const CREATE_CHAT = gql`\n  mutation createChat($roomID: String) {\n    createChat (roomID: $roomID) {\n      roomID\n      messages {\n        sender\n        message\n      }\n    }\n  }\n`;\n\nexport const ADD_MESSAGE = gql`\n  mutation addMessage($roomID: String, $message: MessageInput) {\n    addMessage (roomID: $roomID, message: $message) {\n      roomID\n      messages {\n        sender\n        message\n      }\n    }\n  }\n`;\n\nexport function useLogoutMutation() {\n  const [logout, { data, loading, error }] = useMutation(LOGOUT_MUTATION);\n\n  return { logout, data, loading, error };\n}\n\n// uploading photo mutation\n\nconst QUERY_UPLOAD_PHOTO = `\n\tmutation ($formData: FormData!) {\n\t\tuploadProfilePicture(formData: $formData) {\n\t\t\tsuccess\n\t\t}\n\t}\n`;\n\nconst formData = new FormData();\n\n// async function sendMutation() {\n// \tconst response = await fetch(\"/graphql\", {\n// \t\tmethod: \"POST\",\n// \t\theaders: {\n// \t\t\t\"Content-Type\": \"application/json\",\n// \t\t},\n// \t\tbody: JSON.stringify({\n// \t\t\tquery: QUERY_UPLOAD_PHOTO,\n// \t\t\tvariables: {\n// \t\t\t\tformData,\n// \t\t\t},\n// \t\t}),\n// \t});\n// \tconsole.log(response);\n// }\n// sendMutation();\n","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Register\\index.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Register\\Register.js",["124","125"],"import * as React from 'react';\nimport { useState } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { REGISTER_USER } from \"../../utils/mutations\";\nimport { Modal, Box, Typography, Grid, TextField, Button } from \"@mui/material\";\n\nimport Auth from \"../../utils/auth.js\";\n\nfunction Register(props) {\n  const [formState, setFormState] = useState({\n    first_name: \"\",\n    last_name: \"\",\n    location: \"\",\n    email: \"\",\n    password: \"\",\n  });\n\n  const [register, { error, data }] = useMutation(REGISTER_USER);\n\n  const handleInputChange = ({ target: { name, value } }) => {\n    setFormState({ ...formState, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await register({\n        variables: { ...formState },\n      });\n      console.log(data);\n      Auth.login(data.register.token);\n      window.location('/Feed')\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    // Sign up modal\n    <Modal\n      open={props.open}\n      onClose={props.handleClose}\n      aria-labelledby=\"modal-modal-title\"\n      aria-describedby=\"modal-modal-description\"\n    >\n      <Box sx={{\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        width: 400,\n        bgcolor: 'background.paper',\n        boxShadow: 24,\n        p: 4,\n        \"@media (max-width: 600px)\": {\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          width: '70%',\n          bgcolor: 'background.paper',\n          boxShadow: 24,\n          p: 4,\n        }\n      }}>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign up\n        </Typography>\n        <Box component=\"form\" noValidate onSubmit={handleFormSubmit} sx={{ mt: 3 }}>\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                autoComplete=\"given-name\"\n                name=\"first_name\"\n                required\n                fullWidth\n                id=\"firstName\"\n                label=\"First Name\"\n                autoFocus\n                value={formState.first_name}\n                onChange={handleInputChange}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                required\n                fullWidth\n                id=\"lastName\"\n                label=\"Last Name\"\n                name=\"last_name\"\n                autoComplete=\"family-name\"\n                value={formState.last_name}\n                onChange={handleInputChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                required\n                fullWidth\n                id=\"location\"\n                label=\"Location\"\n                name=\"location\"\n                autoComplete=\"location\"\n                value={formState.location}\n                onChange={handleInputChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                autoComplete=\"email\"\n                value={formState.email}\n                onChange={handleInputChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"new-password\"\n                value={formState.password}\n                onChange={handleInputChange}\n              />\n            </Grid>\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            sx={{ mt: 3, mb: 2, backgroundColor: '#405C96' }}\n          >\n            Sign Up\n          </Button>\n        </Box>\n      </Box>\n    </Modal>\n  );\n}\n\nexport default Register;\n","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Matches\\index.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Matches\\Match.js",["126","127","128","129"],"import { useQuery } from \"@apollo/client\";\nimport { QUERY_USER, QUERY_OWNER } from \"../../utils/queries\";\nimport { getDistance } from \"geolib\";\nimport auth from \"../../utils/auth.js\";\nimport Typography from \"@mui/material/Typography\";\nimport { useState } from \"react\";\n\nasync function findLatLon(city) {\n  let latLon = { lat: \"\", lon: \"\" };\n  const geoAPI = `https://api.openweathermap.org/geo/1.0/direct?q=${city}&appid=1560a07c19638ebfb003c32577cdfee1`;\n  let response = await fetch(geoAPI);\n  let data = await response.json();\n  latLon.lat = data[0].lat;\n  latLon.lon = data[0].lon;\n  return latLon;\n}\n\nasync function distanceCalc(userLocation, otherLocation) {\n  let location1 = userLocation.toLowerCase();\n  location1 = location1.replace(\" \", \"_\");\n  let location2 = otherLocation.toLowerCase();\n  location2 = location2.replace(\" \", \"_\");\n  const userLatLon = await findLatLon(location1);\n  const otherLatLon = await findLatLon(location2);\n  const userLat = userLatLon.lat;\n  const userLon = userLatLon.lon;\n  const otherLat = otherLatLon.lat;\n  const otherLon = otherLatLon.lon;\n  let distance = getDistance(\n    { latitude: userLat, longitude: userLon },\n    { latitude: otherLat, longitude: otherLon }\n  );\n  distance = distance / 1609;\n  const finalDistance = Math.round(distance);\n  return finalDistance;\n}\n\nfunction Match(props) {\n  const [distance, setDistance] = useState(0);\n  // const { loading: ownerLoading, data: ownerData } = useQuery(QUERY_OWNER, {\n  //   variables: { ownerId: props.pet.owner },\n  // });\n  // const owner = ownerData?.owner || {};\n  const ownerLocation = props.pet.owner.location;\n  const userLocation = props.userData.user.location;\n  function calculateDistance() {\n    distanceCalc(ownerLocation, userLocation).then((res) => {\n      setDistance(res);\n    });\n  }\n  return (\n    // <>\n    //   {ownerLoading ? (\n    //     <div>Loading...</div>\n    //   ) : (\n        <>\n          {calculateDistance()}\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Owner: {props.pet.owner.first_name} {props.pet.owner.last_name}\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            {distance} Miles Away\n          </Typography>\n        </>\n      // )}\n    // </>\n  );\n}\n\n// findLatLon(\"fountain_valley\");\n\nexport default Match;\n","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\queries.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\AddPet\\index.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\AddPet\\AddPet.js",["130","131"],"import * as React from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardMedia,\n  CardContent,\n  Button,\n  Grid,\n  TextField,\n  Box,\n  Typography,\n} from \"@mui/material\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport { useMutation } from \"@apollo/client\";\nimport { ADD_PET } from \"../../utils/mutations\";\n\nimport auth from \"../../utils/auth\";\n\nexport default function RecipeReviewCard() {\n  const [formState, setFormState] = React.useState({\n    pet_name: \"\",\n    species: \"\",\n    birthday: \"\",\n    pictures: \"...\",\n    owner: \"\",\n  });\n\n  const [imageFile, setImageFile] = React.useState();\n  const [preview, setPreview] = React.useState();\n  const [addPet] = useMutation(ADD_PET);\n\n  const handleInputChange = ({ target: { name, value } }) => {\n    setFormState({ ...formState, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const addPetForm = await addPet({\n        variables: {\n          name: formState.pet_name,\n          species: formState.species,\n          birthday: formState.birthday,\n          pictures: formState.pictures,\n        },\n      });\n      window.location.replace(\"/Profile\");\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  React.useEffect(() => {\n    if (!imageFile) {\n      setPreview(\n        \"https://sugarplumnannies.com/wp-content/uploads/2015/11/dog-placeholder.jpg\"\n      );\n      return;\n    }\n\n    const objectUrl = URL.createObjectURL(imageFile);\n    console.log(objectUrl);\n    console.log(typeof objectUrl);\n    setPreview(objectUrl);\n\n    return () => URL.revokeObjectURL(objectUrl);\n  }, [imageFile]);\n\n  const onSelectFile = (event) => {\n    if (!event.target.files || event.target.files.length === 0) {\n      setImageFile(undefined);\n      return;\n    }\n\n    setImageFile(event.target.files[0]);\n  };\n\n  return (\n    <Card sx={{ maxWidth: 500, margin: \"50px auto\" }}>\n      <CardHeader title=\"Add a new pet!\" sx={{ textAlign: \"center\" }} />\n      <CardMedia\n        component=\"img\"\n        height=\"300\"\n        image={preview}\n        alt=\"pet profile\"\n      />\n      <CardContent>\n        <Box\n          component=\"form\"\n          noValidate\n          onSubmit={handleFormSubmit}\n          sx={{ mt: 3 }}\n        >\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                name=\"pet_name\"\n                required\n                fullWidth\n                id=\"petName\"\n                label=\"Pet Name\"\n                autoFocus\n                value={formState.pet_name}\n                onChange={handleInputChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                required\n                fullWidth\n                id=\"species\"\n                label=\"Species\"\n                name=\"species\"\n                value={formState.species}\n                onChange={handleInputChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                required\n                fullWidth\n                id=\"birthday\"\n                label=\"Birthday\"\n                name=\"birthday\"\n                value={formState.birthday}\n                onChange={handleInputChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <Grid container direction=\"row\" alignItems=\"center\" wrap=\"nowrap\">\n                <Grid item xs={4}>\n                  <Button\n                    variant=\"contained\"\n                    component=\"label\"\n                    startIcon={<AddIcon />}\n                  >\n                    Add Image\n                    <input\n                      hidden\n                      accept=\"image/*\"\n                      multiple\n                      type=\"file\"\n                      onChange={onSelectFile}\n                    />\n                  </Button>\n                </Grid>\n                <Typography noWrap>No File Chosen</Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid container justifyContent=\"center\">\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2, backgroundColor: \"#405C96\", right: \"0\" }}\n            >\n              Save\n            </Button>\n          </Grid>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n}\n",{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":94,"column":20,"nodeType":"138","messageId":"139","endLine":94,"endColumn":35},{"ruleId":"136","severity":1,"message":"140","line":100,"column":20,"nodeType":"138","messageId":"139","endLine":100,"endColumn":34},{"ruleId":"141","severity":1,"message":"142","line":149,"column":6,"nodeType":"143","endLine":149,"endColumn":14,"suggestions":"144"},{"ruleId":"145","severity":1,"message":"146","line":28,"column":1,"nodeType":"147","endLine":28,"endColumn":34},{"ruleId":"136","severity":1,"message":"148","line":1,"column":17,"nodeType":"138","messageId":"139","endLine":1,"endColumn":25},{"ruleId":"136","severity":1,"message":"149","line":1,"column":27,"nodeType":"138","messageId":"139","endLine":1,"endColumn":36},{"ruleId":"136","severity":1,"message":"150","line":2,"column":10,"nodeType":"138","messageId":"139","endLine":2,"endColumn":21},{"ruleId":"136","severity":1,"message":"151","line":7,"column":7,"nodeType":"138","messageId":"139","endLine":7,"endColumn":13},{"ruleId":"136","severity":1,"message":"152","line":29,"column":9,"nodeType":"138","messageId":"139","endLine":29,"endColumn":16},{"ruleId":"136","severity":1,"message":"153","line":15,"column":34,"nodeType":"138","messageId":"139","endLine":15,"endColumn":45},{"ruleId":"136","severity":1,"message":"148","line":17,"column":10,"nodeType":"138","messageId":"139","endLine":17,"endColumn":18},{"ruleId":"136","severity":1,"message":"149","line":17,"column":20,"nodeType":"138","messageId":"139","endLine":17,"endColumn":29},{"ruleId":"136","severity":1,"message":"154","line":38,"column":13,"nodeType":"138","messageId":"139","endLine":38,"endColumn":20},{"ruleId":"136","severity":1,"message":"155","line":26,"column":19,"nodeType":"138","messageId":"139","endLine":26,"endColumn":24},{"ruleId":"136","severity":1,"message":"156","line":26,"column":26,"nodeType":"138","messageId":"139","endLine":26,"endColumn":30},{"ruleId":"136","severity":1,"message":"157","line":106,"column":7,"nodeType":"138","messageId":"139","endLine":106,"endColumn":25},{"ruleId":"136","severity":1,"message":"158","line":114,"column":7,"nodeType":"138","messageId":"139","endLine":114,"endColumn":15},{"ruleId":"136","severity":1,"message":"155","line":18,"column":22,"nodeType":"138","messageId":"139","endLine":18,"endColumn":27},{"ruleId":"136","severity":1,"message":"156","line":18,"column":29,"nodeType":"138","messageId":"139","endLine":18,"endColumn":33},{"ruleId":"136","severity":1,"message":"159","line":1,"column":10,"nodeType":"138","messageId":"139","endLine":1,"endColumn":18},{"ruleId":"136","severity":1,"message":"160","line":2,"column":10,"nodeType":"138","messageId":"139","endLine":2,"endColumn":20},{"ruleId":"136","severity":1,"message":"153","line":2,"column":22,"nodeType":"138","messageId":"139","endLine":2,"endColumn":33},{"ruleId":"136","severity":1,"message":"161","line":4,"column":8,"nodeType":"138","messageId":"139","endLine":4,"endColumn":12},{"ruleId":"136","severity":1,"message":"161","line":17,"column":8,"nodeType":"138","messageId":"139","endLine":17,"endColumn":12},{"ruleId":"136","severity":1,"message":"162","line":39,"column":13,"nodeType":"138","messageId":"139","endLine":39,"endColumn":23},"no-native-reassign",["163"],"no-negated-in-lhs",["164"],"no-unused-vars","'userChatLoading' is assigned a value but never used.","Identifier","unusedVar","'friendsLoading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has an unnecessary dependency: 'socket'. Either exclude it or remove the dependency array. Outer scope values like 'socket' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["165"],"import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration","'useState' is defined but never used.","'useEffect' is defined but never used.","'useMutation' is defined but never used.","'LOGOUT' is assigned a value but never used.","'petList' is assigned a value but never used.","'QUERY_OWNER' is defined but never used.","'addChat' is assigned a value but never used.","'error' is assigned a value but never used.","'data' is assigned a value but never used.","'QUERY_UPLOAD_PHOTO' is assigned a value but never used.","'formData' is assigned a value but never used.","'useQuery' is defined but never used.","'QUERY_USER' is defined but never used.","'auth' is defined but never used.","'addPetForm' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"166","fix":"167"},"Update the dependencies array to be: []",{"range":"168","text":"169"},[3711,3719],"[]"]
[{"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\index.js":"1","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\App.js":"2","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\components\\Navbar.js":"3","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Login\\index.js":"4","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Home\\index.js":"5","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Register\\index.js":"6","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Login\\Login.js":"7","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Register\\Register.js":"8","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Home\\Home.js":"9","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\auth.js":"10","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\mutations.js":"11","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Logout\\index.js":"12","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Logout\\Logout.js":"13"},{"size":219,"mtime":1675116385748,"results":"14","hashOfConfig":"15"},{"size":1170,"mtime":1675188477386,"results":"16","hashOfConfig":"15"},{"size":4303,"mtime":1675192637439,"results":"17","hashOfConfig":"15"},{"size":38,"mtime":1675105307904,"results":"18","hashOfConfig":"15"},{"size":37,"mtime":1675105307904,"results":"19","hashOfConfig":"15"},{"size":41,"mtime":1675105307905,"results":"20","hashOfConfig":"15"},{"size":3084,"mtime":1675192637439,"results":"21","hashOfConfig":"15"},{"size":4215,"mtime":1675188836405,"results":"22","hashOfConfig":"15"},{"size":663,"mtime":1675192554668,"results":"23","hashOfConfig":"15"},{"size":497,"mtime":1675192554670,"results":"24","hashOfConfig":"15"},{"size":1405,"mtime":1675205419640,"results":"25","hashOfConfig":"15"},{"size":39,"mtime":1675188477391,"results":"26","hashOfConfig":"15"},{"size":873,"mtime":1675192637440,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1obk5xj",{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"30"},"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\index.js",[],["60","61"],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\App.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\components\\Navbar.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Login\\index.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Home\\index.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Register\\index.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Login\\Login.js",["62","63"],"import * as React from 'react';\nimport { useState } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { LOGIN_USER } from \"../../utils/mutations\";\nimport { Grid, Box, Avatar, Typography, TextField, Button, Link, Paper } from '@mui/material';\nimport PetsIcon from '@mui/icons-material/Pets';\n\n\nimport Auth from \"../../utils/auth.js\";\nimport Register from '../Register';\n\nfunction Login() {\n  const [formState, setFormState] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  const [Login, { error, data }] = useMutation(LOGIN_USER);\n\n  const handleInputChange = ({ target: { name, value } }) => {\n    setFormState({ ...formState, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await Login({\n        variables: { ...formState },\n      });\n\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // Show sign up modal use state\n  const [open, setOpen] = React.useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  return (\n    <>\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square\n        sx={{\n          backgroundColor: '#F8F5F2'\n        }}>\n        <Box\n          sx={{\n            my: 8,\n            mx: 4,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            backgroundColor: '#F8F5F2'\n          }}\n        >\n          <Avatar sx={{ m: 1, bgcolor: '#DE4567' }}>\n            <PetsIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            LOG IN\n          </Typography>\n          <Box component=\"form\" noValidate onSubmit={handleFormSubmit} sx={{ mt: 1 }}>\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Email Address\"\n              name=\"email\"\n              autoComplete=\"email\"\n              autoFocus\n              value={formState.email}\n              onChange={handleInputChange}\n            />\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n              value={formState.password}\n              onChange={handleInputChange}\n            />\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2, backgroundColor: '#405C96' }}\n            >\n              LOG IN\n            </Button>\n            <Grid container>\n              <Grid item>\n                <Link onClick={handleOpen} variant=\"body2\">\n                  {\"Don't have an account? Sign Up\"}\n                </Link>\n              </Grid>\n            </Grid>\n          </Box>\n        </Box>\n      </Grid>\n      <Register handleClose={handleClose} open={open} />\n    </>\n  );\n}\n\nexport default Login;\n","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Register\\Register.js",["64","65"],"import * as React from 'react';\nimport { useState } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { REGISTER_USER } from \"../../utils/mutations\";\nimport { Modal, Box, Typography, Grid, TextField, Button } from \"@mui/material\";\n\nimport Auth from \"../../utils/auth.js\";\n\nfunction Register(props) {\n  const [formState, setFormState] = useState({\n    first_name: \"\",\n    last_name: \"\",\n    location: \"\",\n    email: \"\",\n    password: \"\",\n  });\n\n  const [register, { error, data }] = useMutation(REGISTER_USER);\n\n  const handleInputChange = ({ target: { name, value } }) => {\n    setFormState({ ...formState, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await register({\n        variables: { ...formState },\n      });\n      console.log(data);\n      Auth.login(data.register.token);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    // Sign up modal\n    <Modal\n      open={props.open}\n      onClose={props.handleClose}\n      aria-labelledby=\"modal-modal-title\"\n      aria-describedby=\"modal-modal-description\"\n    >\n      <Box sx={{\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        width: 400,\n        bgcolor: 'background.paper',\n        border: '2px solid #000',\n        boxShadow: 24,\n        p: 4,\n        \"@media (max-width: 600px)\": {\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          width: '70%',\n          bgcolor: 'background.paper',\n          border: '2px solid #000',\n          boxShadow: 24,\n          p: 4,\n        }\n      }}>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign up\n        </Typography>\n        <Box component=\"form\" noValidate onSubmit={handleFormSubmit} sx={{ mt: 3 }}>\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                autoComplete=\"given-name\"\n                name=\"first_name\"\n                required\n                fullWidth\n                id=\"firstName\"\n                label=\"First Name\"\n                autoFocus\n                value={formState.first_name}\n                onChange={handleInputChange}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                required\n                fullWidth\n                id=\"lastName\"\n                label=\"Last Name\"\n                name=\"last_name\"\n                autoComplete=\"family-name\"\n                value={formState.last_name}\n                onChange={handleInputChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                required\n                fullWidth\n                id=\"location\"\n                label=\"Location\"\n                name=\"location\"\n                autoComplete=\"location\"\n                value={formState.location}\n                onChange={handleInputChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                autoComplete=\"email\"\n                value={formState.email}\n                onChange={handleInputChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"new-password\"\n                value={formState.password}\n                onChange={handleInputChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n            </Grid>\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            sx={{ mt: 3, mb: 2, backgroundColor: '#405C96' }}\n          >\n            Sign Up\n          </Button>\n        </Box>\n      </Box>\n    </Modal>\n  );\n}\n\nexport default Register;\n","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Home\\Home.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\auth.js",["66"],"import decode from \"jwt-decode\";\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    const token = this.getToken();\n    return token ? true : false;\n  }\n\n  getToken() {\n    return localStorage.getItem(\"auth_token\");\n  }\n\n  login(token) {\n    localStorage.setItem(\"auth_token\", token);\n    window.location.assign(\"/\");\n  }\n\n  logout() {\n    localStorage.removeItem(\"auth_token\");\n    window.location.reload();\n  }\n}\n\nexport default new AuthService();\n ","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\utils\\mutations.js",["67"],"import { gql, useMutation } from \"@apollo/client\";\n\nexport const REGISTER_USER = gql`\n  mutation register(\n    $first_name: String!\n    $last_name: String!\n    $email: String!\n    $password: String!\n    $location: String!\n  ) {\n    register(\n      first_name: $first_name\n      last_name: $last_name\n      email: $email\n      password: $password\n      location: $location\n    ) {\n      token\n      user {\n        _id\n        first_name\n        last_name\n        email\n        location\n      }\n    }\n  }\n`;\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        first_name\n        last_name\n        email\n      }\n    }\n  }\n`;\n\n\n// const LOGOUT_MUTATION = gql`\n// \tmutation LogoutMutation {\n// \t\tlogout\n// \t}\n// `;\n\n// export function useLogoutMutation() {\n// \tconst [logout, { data, loading, error }] = useMutation(LOGOUT_MUTATION);\n\n// \treturn { logout, data, loading, error };\n// }\n\n// // uploading photo mutation\n// mutation($formData: FormData!) {\n//   uploadProfilePicture(formData: $formData) {\n//     success\n//   }\n// }\n\n\n// const response = await fetch(\"/graphql\", {\n//   method: \"POST\",\n//   headers: {\n//     \"Content-Type\": \"application/json\",\n//   },\n//   body: JSON.stringify({\n//     query: mutation,\n//     variables: {\n//       formData,\n//     },\n//   }),\n// });","C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Logout\\index.js",[],"C:\\Users\\bwang\\Desktop\\Bootcamp\\Projects\\Pet-Pals-A-Social-Media-App-for-Pets\\client\\src\\pages\\Logout\\Logout.js",["68","69"],"import React, { useState, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { Button } from \"@mui/material\";\n\nconst LOGOUT = gql`\n\tmutation Logout {\n\t\tlogout\n\t}\n`;\n\nfunction LogoutForm() {\n\tconst [logout, { data }] = useMutation(LOGOUT);\n\tconst [isLoggedOut, setIsLoggedOut] = useState(false);\n\n\tuseEffect(() => {\n\t\tif (data) {\n\t\t\tAuthService.logout();\n\t\t\tsetIsLoggedOut(true);\n\t\t}\n\t}, [data]);\n\n\tconst handleSubmit = async (event) => {\n\t\tevent.preventDefault();\n\t\tawait logout();\n\t};\n\n\tif (isLoggedOut) {\n\t\treturn <p>You have successfully logged out.</p>;\n\t}\n\n\treturn (\n\t\t<Button variant=\"outlined\"\n\t\t\tsx={{\n\t\t\t\tcolor: \"white\",\n\t\t\t\tborderColor: \"white\",\n\t\t\t\tml: \"20px\",\n\t\t\t\t\"&:hover\": {\n\t\t\t\t\tcolor: \"#DE4567\",\n\t\t\t\t\tborderColor: \"#DE4567\",\n\t\t\t\t}\n\t\t\t}}\n\n\t\t>\n\t\t\tLogout\n\t\t</Button>\n\t);\n}\n\nexport default LogoutForm;\n",{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":18,"column":19,"nodeType":"76","messageId":"77","endLine":18,"endColumn":24},{"ruleId":"74","severity":1,"message":"78","line":18,"column":26,"nodeType":"76","messageId":"77","endLine":18,"endColumn":30},{"ruleId":"74","severity":1,"message":"75","line":18,"column":22,"nodeType":"76","messageId":"77","endLine":18,"endColumn":27},{"ruleId":"74","severity":1,"message":"78","line":18,"column":29,"nodeType":"76","messageId":"77","endLine":18,"endColumn":33},{"ruleId":"79","severity":1,"message":"80","line":28,"column":1,"nodeType":"81","endLine":28,"endColumn":34},{"ruleId":"74","severity":1,"message":"82","line":1,"column":15,"nodeType":"76","messageId":"77","endLine":1,"endColumn":26},{"ruleId":"83","severity":2,"message":"84","line":18,"column":4,"nodeType":"76","messageId":"85","endLine":18,"endColumn":15},{"ruleId":"74","severity":1,"message":"86","line":23,"column":8,"nodeType":"76","messageId":"77","endLine":23,"endColumn":20},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'data' is assigned a value but never used.","import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration","'useMutation' is defined but never used.","no-undef","'AuthService' is not defined.","undef","'handleSubmit' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]